
ads1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08005068  08005068  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005068  08005068  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08005070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000c4  08005134  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005134  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae2c  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a52  00000000  00000000  0002af5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b9  00000000  00000000  0002d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001745f  00000000  00000000  0002db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccdc  00000000  00000000  00044fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084c6a  00000000  00000000  00051c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e40  00000000  00000000  000d68f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000d9738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	080046c8 	.word	0x080046c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	080046c8 	.word	0x080046c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <ads1115_init>:
#include "main.h"
#include "ads1115.h"
uint8_t ADS1115_POINTER_CONFIGURATION = 0x01;
uint8_t ADS1115_POINTER_CONVERSION = 0x00;

void ads1115_init(uint8_t i2c_addr, I2C_HandleTypeDef *hi2c, ads1115_adc_t *adc){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	73fb      	strb	r3, [r7, #15]
	adc->hi2c = hi2c;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	601a      	str	r2, [r3, #0]
    adc->i2c_addr = i2c_addr;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	711a      	strb	r2, [r3, #4]
    ads1115_read_config(adc);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f804 	bl	800068c <ads1115_read_config>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <ads1115_read_config>:

void ads1115_read_config(ads1115_adc_t *adc){
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
    uint8_t dst[2];
    HAL_I2C_Master_Transmit(adc->hi2c, adc->i2c_addr << 1, &ADS1115_POINTER_CONFIGURATION, 1, HAL_MAX_DELAY);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	b29b      	uxth	r3, r3
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	b299      	uxth	r1, r3
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <ads1115_read_config+0x60>)
 80006ac:	f001 fdf8 	bl	80022a0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(adc->hi2c, adc->i2c_addr << 1, dst, 2, HAL_MAX_DELAY);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	b299      	uxth	r1, r3
 80006be:	f107 020c 	add.w	r2, r7, #12
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2302      	movs	r3, #2
 80006ca:	f001 fee7 	bl	800249c <HAL_I2C_Master_Receive>
    adc->config = (dst[0] << 8) | dst[1];
 80006ce:	7b3b      	ldrb	r3, [r7, #12]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	7b7b      	ldrb	r3, [r7, #13]
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b21b      	sxth	r3, r3
 80006dc:	b29a      	uxth	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	80da      	strh	r2, [r3, #6]
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000000 	.word	0x20000000

080006f0 <ads1115_write_config>:

void ads1115_write_config(ads1115_adc_t *adc) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
    uint8_t src[3];
    src[0] = ADS1115_POINTER_CONFIGURATION;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <ads1115_write_config+0x48>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	733b      	strb	r3, [r7, #12]
    src[1] = (uint8_t)(adc->config >> 8);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	88db      	ldrh	r3, [r3, #6]
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	b29b      	uxth	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	737b      	strb	r3, [r7, #13]
    src[2] = (uint8_t)(adc->config & 0xff);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	88db      	ldrh	r3, [r3, #6]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(adc->hi2c, adc->i2c_addr << 1, src, 3, HAL_MAX_DELAY);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	b29b      	uxth	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b299      	uxth	r1, r3
 8000720:	f107 020c 	add.w	r2, r7, #12
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2303      	movs	r3, #3
 800072c:	f001 fdb8 	bl	80022a0 <HAL_I2C_Master_Transmit>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000

0800073c <ads1115_read_adc>:

void ads1115_read_adc(int16_t *adc_value, ads1115_adc_t *adc){
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    // If mode is single-shot, set bit 15 to start the conversion.
	ads1115_read_config(adc);
 8000746:	6838      	ldr	r0, [r7, #0]
 8000748:	f7ff ffa0 	bl	800068c <ads1115_read_config>
    if ((adc->config & ADS1115_MODE_MASK) == ADS1115_MODE_SINGLE_SHOT) {
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	88db      	ldrh	r3, [r3, #6]
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	4013      	ands	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800075c:	d11a      	bne.n	8000794 <ads1115_read_adc+0x58>
        adc->config |= 0x8000;//ADS1115_STATUS_START;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	88db      	ldrh	r3, [r3, #6]
 8000762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800076a:	b29a      	uxth	r2, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	80da      	strh	r2, [r3, #6]
        ads1115_write_config(adc);
 8000770:	6838      	ldr	r0, [r7, #0]
 8000772:	f7ff ffbd 	bl	80006f0 <ads1115_write_config>


        // Wait until the conversion finishes before reading the value
        ads1115_read_config(adc);
 8000776:	6838      	ldr	r0, [r7, #0]
 8000778:	f7ff ff88 	bl	800068c <ads1115_read_config>
        while ((adc->config & ADS1115_STATUS_MASK) == ADS1115_STATUS_BUSY){
 800077c:	e002      	b.n	8000784 <ads1115_read_adc+0x48>
            ads1115_read_config(adc);
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	f7ff ff84 	bl	800068c <ads1115_read_config>
        while ((adc->config & ADS1115_STATUS_MASK) == ADS1115_STATUS_BUSY){
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	88db      	ldrh	r3, [r3, #6]
 8000788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800078c:	4013      	ands	r3, r2
 800078e:	b29b      	uxth	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f4      	beq.n	800077e <ads1115_read_adc+0x42>
        }
    }
    HAL_Delay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f001 f99b 	bl	8001ad0 <HAL_Delay>

    // Now read the value from last conversion
    uint8_t dst[2];

    HAL_I2C_Master_Transmit(adc->hi2c, adc->i2c_addr << 1, &ADS1115_POINTER_CONVERSION, 1, HAL_MAX_DELAY);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	b299      	uxth	r1, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <ads1115_read_adc+0xb4>)
 80007b2:	f001 fd75 	bl	80022a0 <HAL_I2C_Master_Transmit>

    HAL_I2C_Master_Receive(adc->hi2c, adc->i2c_addr << 1, dst, 2, HAL_MAX_DELAY);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b299      	uxth	r1, r3
 80007c4:	f107 020c 	add.w	r2, r7, #12
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2302      	movs	r3, #2
 80007d0:	f001 fe64 	bl	800249c <HAL_I2C_Master_Receive>

    *adc_value = (dst[0] << 8) | dst[1];
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	801a      	strh	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000e0 	.word	0x200000e0

080007f4 <ads1115_conv_volts>:

float ads1115_conv_volts(int16_t valor_adc, ads1115_adc_t *adc){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	80fb      	strh	r3, [r7, #6]
    float fsr;
    uint16_t pga = adc->config & ADS1115_PGA_MASK;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	88db      	ldrh	r3, [r3, #6]
 8000804:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000808:	4013      	ands	r3, r2
 800080a:	827b      	strh	r3, [r7, #18]
    switch (pga) {
 800080c:	8a7b      	ldrh	r3, [r7, #18]
 800080e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000812:	d029      	beq.n	8000868 <ads1115_conv_volts+0x74>
 8000814:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000818:	dc29      	bgt.n	800086e <ads1115_conv_volts+0x7a>
 800081a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800081e:	d020      	beq.n	8000862 <ads1115_conv_volts+0x6e>
 8000820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000824:	dc23      	bgt.n	800086e <ads1115_conv_volts+0x7a>
 8000826:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800082a:	d017      	beq.n	800085c <ads1115_conv_volts+0x68>
 800082c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000830:	dc1d      	bgt.n	800086e <ads1115_conv_volts+0x7a>
 8000832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000836:	d00e      	beq.n	8000856 <ads1115_conv_volts+0x62>
 8000838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800083c:	dc17      	bgt.n	800086e <ads1115_conv_volts+0x7a>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <ads1115_conv_volts+0x56>
 8000842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000846:	d003      	beq.n	8000850 <ads1115_conv_volts+0x5c>
 8000848:	e011      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_6_144:
            fsr = 6.144;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <ads1115_conv_volts+0xa8>)
 800084c:	617b      	str	r3, [r7, #20]
            break;
 800084e:	e00e      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_4_096:
            fsr = 4.096;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <ads1115_conv_volts+0xac>)
 8000852:	617b      	str	r3, [r7, #20]
            break;
 8000854:	e00b      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_2_048:
            fsr = 2.048;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <ads1115_conv_volts+0xb0>)
 8000858:	617b      	str	r3, [r7, #20]
            break;
 800085a:	e008      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_1_024:
            fsr = 1.024;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <ads1115_conv_volts+0xb4>)
 800085e:	617b      	str	r3, [r7, #20]
            break;
 8000860:	e005      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_0_512:
            fsr = 0.512;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <ads1115_conv_volts+0xb8>)
 8000864:	617b      	str	r3, [r7, #20]
            break;
 8000866:	e002      	b.n	800086e <ads1115_conv_volts+0x7a>
        case ADS1115_PGA_0_256:
            fsr = 0.256;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <ads1115_conv_volts+0xbc>)
 800086a:	617b      	str	r3, [r7, #20]
            break;
 800086c:	bf00      	nop
    }

    float voltaje;
    voltaje = (float)valor_adc* fsr /32767;
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd2c 	bl	80002d0 <__aeabi_i2f>
 8000878:	4603      	mov	r3, r0
 800087a:	6979      	ldr	r1, [r7, #20]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fd7b 	bl	8000378 <__aeabi_fmul>
 8000882:	4603      	mov	r3, r0
 8000884:	490b      	ldr	r1, [pc, #44]	; (80008b4 <ads1115_conv_volts+0xc0>)
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe2a 	bl	80004e0 <__aeabi_fdiv>
 800088c:	4603      	mov	r3, r0
 800088e:	60fb      	str	r3, [r7, #12]

    return voltaje;
 8000890:	68fb      	ldr	r3, [r7, #12]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40c49ba6 	.word	0x40c49ba6
 80008a0:	4083126f 	.word	0x4083126f
 80008a4:	4003126f 	.word	0x4003126f
 80008a8:	3f83126f 	.word	0x3f83126f
 80008ac:	3f03126f 	.word	0x3f03126f
 80008b0:	3e83126f 	.word	0x3e83126f
 80008b4:	46fffe00 	.word	0x46fffe00

080008b8 <ads1115_set_mux>:

void ads1115_set_mux(enum ads1115_mux_t mux, ads1115_adc_t *adc){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	80fb      	strh	r3, [r7, #6]
	adc->config &= ~ADS1115_MUX_MASK;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	88db      	ldrh	r3, [r3, #6]
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	80da      	strh	r2, [r3, #6]
	adc->config |= mux;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	88da      	ldrh	r2, [r3, #6]
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 80008ec:	6838      	ldr	r0, [r7, #0]
 80008ee:	f7ff feff 	bl	80006f0 <ads1115_write_config>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <ads1115_set_pga>:

void ads1115_set_pga(enum ads1115_pga_t pga, ads1115_adc_t *adc){
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	6039      	str	r1, [r7, #0]
 8000904:	80fb      	strh	r3, [r7, #6]
	adc->config &= ~ADS1115_PGA_MASK;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	88db      	ldrh	r3, [r3, #6]
 800090a:	b21a      	sxth	r2, r3
 800090c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000910:	b21b      	sxth	r3, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	b21b      	sxth	r3, r3
 8000916:	4013      	ands	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	80da      	strh	r2, [r3, #6]
	adc->config |= pga;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	88da      	ldrh	r2, [r3, #6]
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	4313      	orrs	r3, r2
 8000928:	b29a      	uxth	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f7ff fede 	bl	80006f0 <ads1115_write_config>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <ads1115_set_mode>:

void ads1115_set_mode(enum ads1115_mode_t mode, ads1115_adc_t *adc){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	80fb      	strh	r3, [r7, #6]
	adc->config &= ~ADS1115_MODE_MASK;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	b21a      	sxth	r2, r3
 800094e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000952:	b21b      	sxth	r3, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	b21b      	sxth	r3, r3
 8000958:	4013      	ands	r3, r2
 800095a:	b21b      	sxth	r3, r3
 800095c:	b29a      	uxth	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	80da      	strh	r2, [r3, #6]
	adc->config |= mode;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	88da      	ldrh	r2, [r3, #6]
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	4313      	orrs	r3, r2
 800096a:	b29a      	uxth	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	f7ff febd 	bl	80006f0 <ads1115_write_config>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <ads1115_set_rate>:

void ads1115_set_rate(enum ads1115_rate_t rate, ads1115_adc_t *adc){
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	6039      	str	r1, [r7, #0]
 8000988:	71fb      	strb	r3, [r7, #7]
	adc->config &= ~ADS1115_RATE_MASK;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	88db      	ldrh	r3, [r3, #6]
 800098e:	b21a      	sxth	r2, r3
 8000990:	23e0      	movs	r3, #224	; 0xe0
 8000992:	b21b      	sxth	r3, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	b21b      	sxth	r3, r3
 8000998:	4013      	ands	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	b29a      	uxth	r2, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	80da      	strh	r2, [r3, #6]
	adc->config |= rate;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	88da      	ldrh	r2, [r3, #6]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f7ff fe9c 	bl	80006f0 <ads1115_write_config>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <ads1115_set_comp_mode>:

void ads1115_set_comp_mode(enum ads1115_comp_mode_t comp, ads1115_adc_t *adc){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
	adc->config &= ~ADS1115_COMP_MODE_MASK;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	88db      	ldrh	r3, [r3, #6]
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	2310      	movs	r3, #16
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4013      	ands	r3, r2
 80009dc:	b21b      	sxth	r3, r3
 80009de:	b29a      	uxth	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	80da      	strh	r2, [r3, #6]
	adc->config |= comp;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff fe7b 	bl	80006f0 <ads1115_write_config>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ads1115_set_comp_pol>:

void ads1115_set_comp_pol(enum ads1115_comp_pol_t pol, ads1115_adc_t *adc){
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	6039      	str	r1, [r7, #0]
 8000a0c:	71fb      	strb	r3, [r7, #7]
	adc->config &= ~ADS1115_COMP_POL_MASK;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	88db      	ldrh	r3, [r3, #6]
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	2308      	movs	r3, #8
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	80da      	strh	r2, [r3, #6]
	adc->config |= pol;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	88da      	ldrh	r2, [r3, #6]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	f7ff fe5a 	bl	80006f0 <ads1115_write_config>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <ads1115_set_comp_lat>:

void ads1115_set_comp_lat(enum ads1115_comp_lat_t lat, ads1115_adc_t *adc){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
	adc->config &= ~ADS1115_COMP_LAT_MASK;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	88db      	ldrh	r3, [r3, #6]
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	2304      	movs	r3, #4
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	80da      	strh	r2, [r3, #6]
	adc->config |= lat;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	88da      	ldrh	r2, [r3, #6]
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f7ff fe39 	bl	80006f0 <ads1115_write_config>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <ads1115_set_comp_que>:

void ads1115_set_comp_que(enum ads1115_comp_que_t queue, ads1115_adc_t *adc){
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	6039      	str	r1, [r7, #0]
 8000a90:	71fb      	strb	r3, [r7, #7]
	adc->config &= ~ADS1115_COMP_QUE_MASK;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	88db      	ldrh	r3, [r3, #6]
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	2303      	movs	r3, #3
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	80da      	strh	r2, [r3, #6]
	adc->config |= queue;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	88da      	ldrh	r2, [r3, #6]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	80da      	strh	r2, [r3, #6]

	ads1115_write_config(adc);
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f7ff fe18 	bl	80006f0 <ads1115_write_config>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <fsm_init>:

char menu[] = "\nIngresar: \na para leer la configuracion\nb para modificar la configuracion\nc para adquirir un dato\n";

UART_HandleTypeDef *huart;

void fsm_init(estados_e *estado, eventos_e *evento, UART_HandleTypeDef *huart1){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	*estado = main_menu;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	*evento = N;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2209      	movs	r2, #9
 8000ade:	701a      	strb	r2, [r3, #0]
	huart = huart1;
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <fsm_init+0x2c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
	imprimir_cad(menu);
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <fsm_init+0x30>)
 8000ae8:	f000 fca2 	bl	8001430 <imprimir_cad>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000e4 	.word	0x200000e4
 8000af8:	20000004 	.word	0x20000004

08000afc <fsm_switch>:

void fsm_switch(estados_e *estado, eventos_e evento, ads1115_adc_t *adc){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	460b      	mov	r3, r1
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	72fb      	strb	r3, [r7, #11]

	switch(*estado){
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	f200 80a4 	bhi.w	8000c5c <fsm_switch+0x160>
 8000b14:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <fsm_switch+0x20>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b7b 	.word	0x08000b7b
 8000b24:	08000c2d 	.word	0x08000c2d
 8000b28:	08000b9f 	.word	0x08000b9f
	case main_menu:
		switch(evento){
 8000b2c:	7afb      	ldrb	r3, [r7, #11]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d014      	beq.n	8000b5c <fsm_switch+0x60>
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	dc19      	bgt.n	8000b6a <fsm_switch+0x6e>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <fsm_switch+0x44>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d007      	beq.n	8000b4e <fsm_switch+0x52>
 8000b3e:	e014      	b.n	8000b6a <fsm_switch+0x6e>
		case A:
			*estado = read_config;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
			fun_e1_c1(adc);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f890 	bl	8000c6c <fun_e1_c1>
			break;
 8000b4c:	e014      	b.n	8000b78 <fsm_switch+0x7c>
		case B:
			*estado = write;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2203      	movs	r2, #3
 8000b52:	701a      	strb	r2, [r3, #0]
			fun_e1_c2(adc);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f9e7 	bl	8000f28 <fun_e1_c2>
			break;
 8000b5a:	e00d      	b.n	8000b78 <fsm_switch+0x7c>
		case C:
			*estado = data;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	701a      	strb	r2, [r3, #0]
			fun_e1_c3(adc);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f9f2 	bl	8000f4c <fun_e1_c3>
			break;
 8000b68:	e006      	b.n	8000b78 <fsm_switch+0x7c>
		default:
			*estado = main_menu;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
			imprimir_cad("\nNo se reconoce el caracter ingresado, ingrese uno valido\n");
 8000b70:	483c      	ldr	r0, [pc, #240]	; (8000c64 <fsm_switch+0x168>)
 8000b72:	f000 fc5d 	bl	8001430 <imprimir_cad>
			break;
 8000b76:	bf00      	nop
		}
	break;
 8000b78:	e070      	b.n	8000c5c <fsm_switch+0x160>

	case read_config:
		switch(evento){
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d106      	bne.n	8000b8e <fsm_switch+0x92>
		case R:
			*estado = main_menu;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
			imprimir_cad(menu);
 8000b86:	4838      	ldr	r0, [pc, #224]	; (8000c68 <fsm_switch+0x16c>)
 8000b88:	f000 fc52 	bl	8001430 <imprimir_cad>
			break;
 8000b8c:	e006      	b.n	8000b9c <fsm_switch+0xa0>
		default:
			*estado = read_config;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
			imprimir_cad("\nNo se reconoce el caracter ingresado, ingrese uno valido\n");
 8000b94:	4833      	ldr	r0, [pc, #204]	; (8000c64 <fsm_switch+0x168>)
 8000b96:	f000 fc4b 	bl	8001430 <imprimir_cad>
			break;
 8000b9a:	bf00      	nop
		}
	break;
 8000b9c:	e05e      	b.n	8000c5c <fsm_switch+0x160>

	case write:
		switch(evento){
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d83b      	bhi.n	8000c1c <fsm_switch+0x120>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <fsm_switch+0xb0>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bdf 	.word	0x08000bdf
 8000bb0:	08000be7 	.word	0x08000be7
 8000bb4:	08000bef 	.word	0x08000bef
 8000bb8:	08000bf7 	.word	0x08000bf7
 8000bbc:	08000bff 	.word	0x08000bff
 8000bc0:	08000c07 	.word	0x08000c07
 8000bc4:	08000c0f 	.word	0x08000c0f
 8000bc8:	08000c15 	.word	0x08000c15
 8000bcc:	08000bd1 	.word	0x08000bd1
		case R:
			*estado = main_menu;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			imprimir_cad(menu);
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <fsm_switch+0x16c>)
 8000bd8:	f000 fc2a 	bl	8001430 <imprimir_cad>
			break;
 8000bdc:	e025      	b.n	8000c2a <fsm_switch+0x12e>
		case A:
			fun_e2_c1(adc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 fa16 	bl	8001010 <fun_e2_c1>
			break;
 8000be4:	e021      	b.n	8000c2a <fsm_switch+0x12e>
		case B:
			fun_e2_c2(adc);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 fa78 	bl	80010dc <fun_e2_c2>
			break;
 8000bec:	e01d      	b.n	8000c2a <fsm_switch+0x12e>
		case C:
			fun_e2_c3(adc);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 fac6 	bl	8001180 <fun_e2_c3>
			break;
 8000bf4:	e019      	b.n	8000c2a <fsm_switch+0x12e>
		case D:
			fun_e2_c4(adc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 faf4 	bl	80011e4 <fun_e2_c4>
			break;
 8000bfc:	e015      	b.n	8000c2a <fsm_switch+0x12e>
		case E:
			fun_e2_c5(adc);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f000 fb4a 	bl	8001298 <fun_e2_c5>
			break;
 8000c04:	e011      	b.n	8000c2a <fsm_switch+0x12e>
		case F:
			fun_e2_c6(adc);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 fb76 	bl	80012f8 <fun_e2_c6>
			break;
 8000c0c:	e00d      	b.n	8000c2a <fsm_switch+0x12e>
		case G:
			fun_e2_c7(adc);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fba2 	bl	8001358 <fun_e2_c7>
		case H:
			fun_e2_c8(adc);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 fbcd 	bl	80013b4 <fun_e2_c8>
			break;
 8000c1a:	e006      	b.n	8000c2a <fsm_switch+0x12e>
		default:
			*estado = write;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	701a      	strb	r2, [r3, #0]
			imprimir_cad("\nNo se reconoce el caracter ingresado, ingrese uno valido\n");
 8000c22:	4810      	ldr	r0, [pc, #64]	; (8000c64 <fsm_switch+0x168>)
 8000c24:	f000 fc04 	bl	8001430 <imprimir_cad>
			break;
 8000c28:	bf00      	nop
		}
	break;
 8000c2a:	e017      	b.n	8000c5c <fsm_switch+0x160>

	case data:
		switch(evento){
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d008      	beq.n	8000c44 <fsm_switch+0x148>
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d10a      	bne.n	8000c4c <fsm_switch+0x150>
		case R:
			*estado = main_menu;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
			imprimir_cad(menu);
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <fsm_switch+0x16c>)
 8000c3e:	f000 fbf7 	bl	8001430 <imprimir_cad>
		    break;
 8000c42:	e00a      	b.n	8000c5a <fsm_switch+0x15e>
		case A:
			fun_e1_c3(adc);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f981 	bl	8000f4c <fun_e1_c3>
			break;
 8000c4a:	e006      	b.n	8000c5a <fsm_switch+0x15e>
		default:
			*estado = data;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	701a      	strb	r2, [r3, #0]
			imprimir_cad("\nNo se reconoce el caracter ingresado, ingrese uno valido\n");
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <fsm_switch+0x168>)
 8000c54:	f000 fbec 	bl	8001430 <imprimir_cad>
			break;
 8000c58:	bf00      	nop
		}
		break;
 8000c5a:	bf00      	nop
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	080046e0 	.word	0x080046e0
 8000c68:	20000004 	.word	0x20000004

08000c6c <fun_e1_c1>:

void fun_e1_c1(ads1115_adc_t *adc){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uint16_t mux, pga, operating_mode, rate, comparator, latching_comparator, comparator_queue;
	uint16_t comp_polarity;

	ads1115_read_config(adc);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fd09 	bl	800068c <ads1115_read_config>

	mux = adc->config & ADS1115_MUX_MASK;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	88db      	ldrh	r3, [r3, #6]
 8000c7e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000c82:	4013      	ands	r3, r2
 8000c84:	82fb      	strh	r3, [r7, #22]

	imprimir_cad("\nLa configuracion actual es: \n");
 8000c86:	4884      	ldr	r0, [pc, #528]	; (8000e98 <fun_e1_c1+0x22c>)
 8000c88:	f000 fbd2 	bl	8001430 <imprimir_cad>
	if (mux == ADS1115_MUX_DIFF_0_1){
 8000c8c:	8afb      	ldrh	r3, [r7, #22]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <fun_e1_c1+0x2c>
		imprimir_cad("mux diferencial entre 0 y 1\n");
 8000c92:	4882      	ldr	r0, [pc, #520]	; (8000e9c <fun_e1_c1+0x230>)
 8000c94:	f000 fbcc 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_DIFF_0_3){
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c9e:	d102      	bne.n	8000ca6 <fun_e1_c1+0x3a>
		imprimir_cad("mux diferencial entre 0 y 3\n");
 8000ca0:	487f      	ldr	r0, [pc, #508]	; (8000ea0 <fun_e1_c1+0x234>)
 8000ca2:	f000 fbc5 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_DIFF_1_3){
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cac:	d102      	bne.n	8000cb4 <fun_e1_c1+0x48>
		imprimir_cad("mux diferencial entre 1 y 3\n");
 8000cae:	487d      	ldr	r0, [pc, #500]	; (8000ea4 <fun_e1_c1+0x238>)
 8000cb0:	f000 fbbe 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_DIFF_2_3){
 8000cb4:	8afb      	ldrh	r3, [r7, #22]
 8000cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000cba:	d102      	bne.n	8000cc2 <fun_e1_c1+0x56>
		imprimir_cad("mux diferencial entre 2 y 3\n");
 8000cbc:	487a      	ldr	r0, [pc, #488]	; (8000ea8 <fun_e1_c1+0x23c>)
 8000cbe:	f000 fbb7 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_SINGLE_0){
 8000cc2:	8afb      	ldrh	r3, [r7, #22]
 8000cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cc8:	d102      	bne.n	8000cd0 <fun_e1_c1+0x64>
		imprimir_cad("mux single channel 0\n");
 8000cca:	4878      	ldr	r0, [pc, #480]	; (8000eac <fun_e1_c1+0x240>)
 8000ccc:	f000 fbb0 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_SINGLE_1){
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000cd6:	d102      	bne.n	8000cde <fun_e1_c1+0x72>
		imprimir_cad("mux single channel 1\n");
 8000cd8:	4875      	ldr	r0, [pc, #468]	; (8000eb0 <fun_e1_c1+0x244>)
 8000cda:	f000 fba9 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_SINGLE_2){
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000ce4:	d102      	bne.n	8000cec <fun_e1_c1+0x80>
		imprimir_cad("mux single channel 2\n");
 8000ce6:	4873      	ldr	r0, [pc, #460]	; (8000eb4 <fun_e1_c1+0x248>)
 8000ce8:	f000 fba2 	bl	8001430 <imprimir_cad>
	}
	if (mux == ADS1115_MUX_SINGLE_3){
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000cf2:	d102      	bne.n	8000cfa <fun_e1_c1+0x8e>
		imprimir_cad("mux single channel 3\n");
 8000cf4:	4870      	ldr	r0, [pc, #448]	; (8000eb8 <fun_e1_c1+0x24c>)
 8000cf6:	f000 fb9b 	bl	8001430 <imprimir_cad>
	}

	pga = adc->config & ADS1115_PGA_MASK;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	88db      	ldrh	r3, [r3, #6]
 8000cfe:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000d02:	4013      	ands	r3, r2
 8000d04:	82bb      	strh	r3, [r7, #20]

	if (pga == ADS1115_PGA_6_144){
 8000d06:	8abb      	ldrh	r3, [r7, #20]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <fun_e1_c1+0xa6>
		imprimir_cad("PGA = 6.144\n");
 8000d0c:	486b      	ldr	r0, [pc, #428]	; (8000ebc <fun_e1_c1+0x250>)
 8000d0e:	f000 fb8f 	bl	8001430 <imprimir_cad>
	}
	if (pga == ADS1115_PGA_4_096){
 8000d12:	8abb      	ldrh	r3, [r7, #20]
 8000d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d18:	d102      	bne.n	8000d20 <fun_e1_c1+0xb4>
		imprimir_cad("PGA = 4.096\n");
 8000d1a:	4869      	ldr	r0, [pc, #420]	; (8000ec0 <fun_e1_c1+0x254>)
 8000d1c:	f000 fb88 	bl	8001430 <imprimir_cad>
	}
	if (pga == ADS1115_PGA_2_048){
 8000d20:	8abb      	ldrh	r3, [r7, #20]
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d102      	bne.n	8000d2e <fun_e1_c1+0xc2>
		imprimir_cad("PGA = 2.048\n");
 8000d28:	4866      	ldr	r0, [pc, #408]	; (8000ec4 <fun_e1_c1+0x258>)
 8000d2a:	f000 fb81 	bl	8001430 <imprimir_cad>
	}
	if (pga == ADS1115_PGA_1_024){
 8000d2e:	8abb      	ldrh	r3, [r7, #20]
 8000d30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d34:	d102      	bne.n	8000d3c <fun_e1_c1+0xd0>
		imprimir_cad("PGA = 1.024\n");
 8000d36:	4864      	ldr	r0, [pc, #400]	; (8000ec8 <fun_e1_c1+0x25c>)
 8000d38:	f000 fb7a 	bl	8001430 <imprimir_cad>
	}
	if (pga == ADS1115_PGA_0_512){
 8000d3c:	8abb      	ldrh	r3, [r7, #20]
 8000d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d42:	d102      	bne.n	8000d4a <fun_e1_c1+0xde>
		imprimir_cad("PGA = 0.512\n");
 8000d44:	4861      	ldr	r0, [pc, #388]	; (8000ecc <fun_e1_c1+0x260>)
 8000d46:	f000 fb73 	bl	8001430 <imprimir_cad>
	}
	if (pga == ADS1115_PGA_0_256){
 8000d4a:	8abb      	ldrh	r3, [r7, #20]
 8000d4c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000d50:	d102      	bne.n	8000d58 <fun_e1_c1+0xec>
		imprimir_cad("PGA = 0.256\n");
 8000d52:	485f      	ldr	r0, [pc, #380]	; (8000ed0 <fun_e1_c1+0x264>)
 8000d54:	f000 fb6c 	bl	8001430 <imprimir_cad>
	}

	operating_mode = adc->config & ADS1115_MODE_MASK;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	88db      	ldrh	r3, [r3, #6]
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	4013      	ands	r3, r2
 8000d62:	827b      	strh	r3, [r7, #18]

	if (operating_mode == ADS1115_MODE_CONTINUOUS){
 8000d64:	8a7b      	ldrh	r3, [r7, #18]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <fun_e1_c1+0x104>
		imprimir_cad("El modo es de conversión continua\n");
 8000d6a:	485a      	ldr	r0, [pc, #360]	; (8000ed4 <fun_e1_c1+0x268>)
 8000d6c:	f000 fb60 	bl	8001430 <imprimir_cad>
	}
	if (operating_mode == ADS1115_MODE_SINGLE_SHOT){
 8000d70:	8a7b      	ldrh	r3, [r7, #18]
 8000d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d76:	d102      	bne.n	8000d7e <fun_e1_c1+0x112>
		imprimir_cad("El modo es de disparo unico\n");
 8000d78:	4857      	ldr	r0, [pc, #348]	; (8000ed8 <fun_e1_c1+0x26c>)
 8000d7a:	f000 fb59 	bl	8001430 <imprimir_cad>
	}

	rate = adc->config & ADS1115_RATE_MASK;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	88db      	ldrh	r3, [r3, #6]
 8000d82:	22e0      	movs	r2, #224	; 0xe0
 8000d84:	4013      	ands	r3, r2
 8000d86:	823b      	strh	r3, [r7, #16]

	if (rate == ADS1115_RATE_8_SPS){
 8000d88:	8a3b      	ldrh	r3, [r7, #16]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <fun_e1_c1+0x128>
		imprimir_cad("Rate = 8 SPS\n");
 8000d8e:	4853      	ldr	r0, [pc, #332]	; (8000edc <fun_e1_c1+0x270>)
 8000d90:	f000 fb4e 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_16_SPS){
 8000d94:	8a3b      	ldrh	r3, [r7, #16]
 8000d96:	2b20      	cmp	r3, #32
 8000d98:	d102      	bne.n	8000da0 <fun_e1_c1+0x134>
		imprimir_cad("Rate = 16 SPS\n");
 8000d9a:	4851      	ldr	r0, [pc, #324]	; (8000ee0 <fun_e1_c1+0x274>)
 8000d9c:	f000 fb48 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_32_SPS){
 8000da0:	8a3b      	ldrh	r3, [r7, #16]
 8000da2:	2b40      	cmp	r3, #64	; 0x40
 8000da4:	d102      	bne.n	8000dac <fun_e1_c1+0x140>
		imprimir_cad("Rate = 32 SPS\n");
 8000da6:	484f      	ldr	r0, [pc, #316]	; (8000ee4 <fun_e1_c1+0x278>)
 8000da8:	f000 fb42 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_64_SPS){
 8000dac:	8a3b      	ldrh	r3, [r7, #16]
 8000dae:	2b60      	cmp	r3, #96	; 0x60
 8000db0:	d102      	bne.n	8000db8 <fun_e1_c1+0x14c>
		imprimir_cad("Rate = 64 SPS\n");
 8000db2:	484d      	ldr	r0, [pc, #308]	; (8000ee8 <fun_e1_c1+0x27c>)
 8000db4:	f000 fb3c 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_128_SPS){
 8000db8:	8a3b      	ldrh	r3, [r7, #16]
 8000dba:	2b80      	cmp	r3, #128	; 0x80
 8000dbc:	d102      	bne.n	8000dc4 <fun_e1_c1+0x158>
		imprimir_cad("Rate = 128 SPS\n");
 8000dbe:	484b      	ldr	r0, [pc, #300]	; (8000eec <fun_e1_c1+0x280>)
 8000dc0:	f000 fb36 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_250_SPS){
 8000dc4:	8a3b      	ldrh	r3, [r7, #16]
 8000dc6:	2ba0      	cmp	r3, #160	; 0xa0
 8000dc8:	d102      	bne.n	8000dd0 <fun_e1_c1+0x164>
		imprimir_cad("Rate = 250 SPS\n");
 8000dca:	4849      	ldr	r0, [pc, #292]	; (8000ef0 <fun_e1_c1+0x284>)
 8000dcc:	f000 fb30 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_475_SPS){
 8000dd0:	8a3b      	ldrh	r3, [r7, #16]
 8000dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8000dd4:	d102      	bne.n	8000ddc <fun_e1_c1+0x170>
		imprimir_cad("Rate = 475 SPS\n");
 8000dd6:	4847      	ldr	r0, [pc, #284]	; (8000ef4 <fun_e1_c1+0x288>)
 8000dd8:	f000 fb2a 	bl	8001430 <imprimir_cad>
	}
	if (rate == ADS1115_RATE_860_SPS){
 8000ddc:	8a3b      	ldrh	r3, [r7, #16]
 8000dde:	2be0      	cmp	r3, #224	; 0xe0
 8000de0:	d102      	bne.n	8000de8 <fun_e1_c1+0x17c>
		imprimir_cad("Rate = 860 SPS\n");
 8000de2:	4845      	ldr	r0, [pc, #276]	; (8000ef8 <fun_e1_c1+0x28c>)
 8000de4:	f000 fb24 	bl	8001430 <imprimir_cad>
	}

	comparator = adc->config & ADS1115_COMP_MODE_MASK;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	88db      	ldrh	r3, [r3, #6]
 8000dec:	2210      	movs	r2, #16
 8000dee:	4013      	ands	r3, r2
 8000df0:	81fb      	strh	r3, [r7, #14]

	if (comparator == ADS1115_COMPARATOR_TRADITIONAL){
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <fun_e1_c1+0x192>
		imprimir_cad("El comparador es tradicional\n");
 8000df8:	4840      	ldr	r0, [pc, #256]	; (8000efc <fun_e1_c1+0x290>)
 8000dfa:	f000 fb19 	bl	8001430 <imprimir_cad>
	}
	if (comparator == ADS1115_COMPARATOR_WINDOW){
 8000dfe:	89fb      	ldrh	r3, [r7, #14]
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d102      	bne.n	8000e0a <fun_e1_c1+0x19e>
		imprimir_cad("Hay una ventana de comparacion\n");
 8000e04:	483e      	ldr	r0, [pc, #248]	; (8000f00 <fun_e1_c1+0x294>)
 8000e06:	f000 fb13 	bl	8001430 <imprimir_cad>
	}

	 comp_polarity = adc->config & ADS1115_COMP_POL_MASK;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	88db      	ldrh	r3, [r3, #6]
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4013      	ands	r3, r2
 8000e12:	81bb      	strh	r3, [r7, #12]

	 if (comp_polarity == ADS1115_COMPARATOR_POLARITY_LO){
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <fun_e1_c1+0x1b4>
		 imprimir_cad("Polaridad de comparacion baja\n");
 8000e1a:	483a      	ldr	r0, [pc, #232]	; (8000f04 <fun_e1_c1+0x298>)
 8000e1c:	f000 fb08 	bl	8001430 <imprimir_cad>
	 }
	 if (comp_polarity == ADS1115_COMPARATOR_POLARITY_HI){
 8000e20:	89bb      	ldrh	r3, [r7, #12]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d102      	bne.n	8000e2c <fun_e1_c1+0x1c0>
		 imprimir_cad("Polaridad de comparacion alta\n");
 8000e26:	4838      	ldr	r0, [pc, #224]	; (8000f08 <fun_e1_c1+0x29c>)
 8000e28:	f000 fb02 	bl	8001430 <imprimir_cad>
	 }

	 latching_comparator = adc->config & ADS1115_COMP_LAT_MASK;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	88db      	ldrh	r3, [r3, #6]
 8000e30:	2204      	movs	r2, #4
 8000e32:	4013      	ands	r3, r2
 8000e34:	817b      	strh	r3, [r7, #10]

	 if (latching_comparator == ADS1115_COMPARATOR_NONLATCHING){
 8000e36:	897b      	ldrh	r3, [r7, #10]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <fun_e1_c1+0x1d6>
		 imprimir_cad("Comparador sin latching\n");
 8000e3c:	4833      	ldr	r0, [pc, #204]	; (8000f0c <fun_e1_c1+0x2a0>)
 8000e3e:	f000 faf7 	bl	8001430 <imprimir_cad>
	 }
	 if (latching_comparator == ADS1115_COMPARATOR_LATCHING){
 8000e42:	897b      	ldrh	r3, [r7, #10]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d102      	bne.n	8000e4e <fun_e1_c1+0x1e2>
		 imprimir_cad("Comparador con latching\n");
 8000e48:	4831      	ldr	r0, [pc, #196]	; (8000f10 <fun_e1_c1+0x2a4>)
 8000e4a:	f000 faf1 	bl	8001430 <imprimir_cad>
	 }

	 comparator_queue = adc->config & ADS1115_COMP_QUE_MASK;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	88db      	ldrh	r3, [r3, #6]
 8000e52:	2203      	movs	r2, #3
 8000e54:	4013      	ands	r3, r2
 8000e56:	813b      	strh	r3, [r7, #8]

	if (comparator_queue == ADS1115_COMPARATOR_QUE_1){
 8000e58:	893b      	ldrh	r3, [r7, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <fun_e1_c1+0x1f8>
		imprimir_cad("La fila de comparador es 1\n");
 8000e5e:	482d      	ldr	r0, [pc, #180]	; (8000f14 <fun_e1_c1+0x2a8>)
 8000e60:	f000 fae6 	bl	8001430 <imprimir_cad>
	}
	if (comparator_queue == ADS1115_COMPARATOR_QUE_2){
 8000e64:	893b      	ldrh	r3, [r7, #8]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <fun_e1_c1+0x204>
		imprimir_cad("La fila de comparador es 2\n");
 8000e6a:	482b      	ldr	r0, [pc, #172]	; (8000f18 <fun_e1_c1+0x2ac>)
 8000e6c:	f000 fae0 	bl	8001430 <imprimir_cad>
	}
	if (comparator_queue == ADS1115_COMPARATOR_QUE_4){
 8000e70:	893b      	ldrh	r3, [r7, #8]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d102      	bne.n	8000e7c <fun_e1_c1+0x210>
		imprimir_cad("La fila de comparador es 4\n");
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <fun_e1_c1+0x2b0>)
 8000e78:	f000 fada 	bl	8001430 <imprimir_cad>
	}
	if (comparator_queue == ADS1115_COMPARATOR_QUE_DISABLE){
 8000e7c:	893b      	ldrh	r3, [r7, #8]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d102      	bne.n	8000e88 <fun_e1_c1+0x21c>
		imprimir_cad("La fila de comparador esta deshabilitada\n");
 8000e82:	4827      	ldr	r0, [pc, #156]	; (8000f20 <fun_e1_c1+0x2b4>)
 8000e84:	f000 fad4 	bl	8001430 <imprimir_cad>
	}

	imprimir_cad("\nIngrese r para volver\n");
 8000e88:	4826      	ldr	r0, [pc, #152]	; (8000f24 <fun_e1_c1+0x2b8>)
 8000e8a:	f000 fad1 	bl	8001430 <imprimir_cad>

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800471c 	.word	0x0800471c
 8000e9c:	0800473c 	.word	0x0800473c
 8000ea0:	0800475c 	.word	0x0800475c
 8000ea4:	0800477c 	.word	0x0800477c
 8000ea8:	0800479c 	.word	0x0800479c
 8000eac:	080047bc 	.word	0x080047bc
 8000eb0:	080047d4 	.word	0x080047d4
 8000eb4:	080047ec 	.word	0x080047ec
 8000eb8:	08004804 	.word	0x08004804
 8000ebc:	0800481c 	.word	0x0800481c
 8000ec0:	0800482c 	.word	0x0800482c
 8000ec4:	0800483c 	.word	0x0800483c
 8000ec8:	0800484c 	.word	0x0800484c
 8000ecc:	0800485c 	.word	0x0800485c
 8000ed0:	0800486c 	.word	0x0800486c
 8000ed4:	0800487c 	.word	0x0800487c
 8000ed8:	080048a0 	.word	0x080048a0
 8000edc:	080048c0 	.word	0x080048c0
 8000ee0:	080048d0 	.word	0x080048d0
 8000ee4:	080048e0 	.word	0x080048e0
 8000ee8:	080048f0 	.word	0x080048f0
 8000eec:	08004900 	.word	0x08004900
 8000ef0:	08004910 	.word	0x08004910
 8000ef4:	08004920 	.word	0x08004920
 8000ef8:	08004930 	.word	0x08004930
 8000efc:	08004940 	.word	0x08004940
 8000f00:	08004960 	.word	0x08004960
 8000f04:	08004980 	.word	0x08004980
 8000f08:	080049a0 	.word	0x080049a0
 8000f0c:	080049c0 	.word	0x080049c0
 8000f10:	080049dc 	.word	0x080049dc
 8000f14:	080049f8 	.word	0x080049f8
 8000f18:	08004a14 	.word	0x08004a14
 8000f1c:	08004a30 	.word	0x08004a30
 8000f20:	08004a4c 	.word	0x08004a4c
 8000f24:	08004a78 	.word	0x08004a78

08000f28 <fun_e1_c2>:

void fun_e1_c2(ads1115_adc_t *adc){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	imprimir_cad("\nIngrese:\na Para configurar el mux\nb Para configurar PGA\nc Para cambiar el modo\nd Para modificar la tasa\ne Para el modo de comparacion\nf Para la polaridad de comparacion\ng Para el latchign de comparacion\nh Para establecer o deshabilitar la fila de comparacion\n");
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <fun_e1_c2+0x1c>)
 8000f32:	f000 fa7d 	bl	8001430 <imprimir_cad>
	imprimir_cad("\nIngrese r para volver\n");
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <fun_e1_c2+0x20>)
 8000f38:	f000 fa7a 	bl	8001430 <imprimir_cad>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08004a90 	.word	0x08004a90
 8000f48:	08004a78 	.word	0x08004a78

08000f4c <fun_e1_c3>:

void fun_e1_c3(ads1115_adc_t *adc){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	float valor_volts;
	char valor_str[20];
	char valor_v[20];

	// valor de la conversion
	ads1115_read_adc(&valor, adc);
 8000f54:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbee 	bl	800073c <ads1115_read_adc>
	valor_volts = ads1115_conv_volts(valor, adc);
 8000f60:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fc44 	bl	80007f4 <ads1115_conv_volts>
 8000f6c:	63f8      	str	r0, [r7, #60]	; 0x3c
	conversion_parte_entera = (int)valor_volts;
 8000f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f70:	f7ff fb52 	bl	8000618 <__aeabi_f2iz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
	conversion_parte_decimal = (valor_volts - conversion_parte_entera) * 1000000;
 8000f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f7a:	f7ff f9a9 	bl	80002d0 <__aeabi_i2f>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4619      	mov	r1, r3
 8000f82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f84:	f7ff f8ee 	bl	8000164 <__aeabi_fsub>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	491a      	ldr	r1, [pc, #104]	; (8000ff4 <fun_e1_c3+0xa8>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f9f3 	bl	8000378 <__aeabi_fmul>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fb3f 	bl	8000618 <__aeabi_f2iz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34


	sprintf(valor_str, "%d \n", valor);
 8000f9e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <fun_e1_c3+0xac>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 feda 	bl	8003d64 <siprintf>
	sprintf(valor_v, "%d.%06dV \n", conversion_parte_entera, conversion_parte_decimal);
 8000fb0:	f107 0008 	add.w	r0, r7, #8
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fb8:	4910      	ldr	r1, [pc, #64]	; (8000ffc <fun_e1_c3+0xb0>)
 8000fba:	f002 fed3 	bl	8003d64 <siprintf>


	imprimir_cad("\n Se realiza y se muestra una conversion\n");
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <fun_e1_c3+0xb4>)
 8000fc0:	f000 fa36 	bl	8001430 <imprimir_cad>
	imprimir_cad("Valor de la conversion: ");
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <fun_e1_c3+0xb8>)
 8000fc6:	f000 fa33 	bl	8001430 <imprimir_cad>
	imprimir_cad(valor_str);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fa2e 	bl	8001430 <imprimir_cad>
	imprimir_cad("Valor en volts: ");
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <fun_e1_c3+0xbc>)
 8000fd6:	f000 fa2b 	bl	8001430 <imprimir_cad>
	imprimir_cad(valor_v);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fa26 	bl	8001430 <imprimir_cad>
	imprimir_cad("Presione a para realizar otra conversion o r para volver\n");
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <fun_e1_c3+0xc0>)
 8000fe6:	f000 fa23 	bl	8001430 <imprimir_cad>
}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	49742400 	.word	0x49742400
 8000ff8:	08004b98 	.word	0x08004b98
 8000ffc:	08004ba0 	.word	0x08004ba0
 8001000:	08004bac 	.word	0x08004bac
 8001004:	08004bd8 	.word	0x08004bd8
 8001008:	08004bf4 	.word	0x08004bf4
 800100c:	08004c08 	.word	0x08004c08

08001010 <fun_e2_c1>:

void fun_e2_c1(ads1115_adc_t *adc){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	char opcion;
	imprimir_cad("\nSeleccione la opcion que desea\n");
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <fun_e2_c1+0xbc>)
 800101a:	f000 fa09 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Diferencial entre canales 0 y 1\nb Diferencial entre canales 0 y 3\nc Diferencial entre canales 1 y 3\n");
 800101e:	482c      	ldr	r0, [pc, #176]	; (80010d0 <fun_e2_c1+0xc0>)
 8001020:	f000 fa06 	bl	8001430 <imprimir_cad>
	imprimir_cad("d Diferencial entre canales 2 y 3\ne Canal single 0\nf Canal single 1\ng Canal single 2\nh Canal single 3\n");
 8001024:	482b      	ldr	r0, [pc, #172]	; (80010d4 <fun_e2_c1+0xc4>)
 8001026:	f000 fa03 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fa16 	bl	8001460 <recibir_char>

	ads1115_read_config(adc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fb29 	bl	800068c <ads1115_read_config>

	if (opcion == 'a'){
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b61      	cmp	r3, #97	; 0x61
 800103e:	d103      	bne.n	8001048 <fun_e2_c1+0x38>
		ads1115_set_mux(ADS1115_MUX_DIFF_0_1, adc);
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fc38 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'b'){
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b62      	cmp	r3, #98	; 0x62
 800104c:	d104      	bne.n	8001058 <fun_e2_c1+0x48>
		ads1115_set_mux(ADS1115_MUX_DIFF_0_3, adc);
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001054:	f7ff fc30 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'c'){
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b63      	cmp	r3, #99	; 0x63
 800105c:	d104      	bne.n	8001068 <fun_e2_c1+0x58>
		ads1115_set_mux(ADS1115_MUX_DIFF_1_3, adc);
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001064:	f7ff fc28 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'd'){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d104      	bne.n	8001078 <fun_e2_c1+0x68>
		ads1115_set_mux(ADS1115_MUX_DIFF_2_3, adc);
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001074:	f7ff fc20 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'e'){
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b65      	cmp	r3, #101	; 0x65
 800107c:	d104      	bne.n	8001088 <fun_e2_c1+0x78>
		ads1115_set_mux(ADS1115_MUX_SINGLE_0, adc);
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001084:	f7ff fc18 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'f'){
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b66      	cmp	r3, #102	; 0x66
 800108c:	d104      	bne.n	8001098 <fun_e2_c1+0x88>
		ads1115_set_mux(ADS1115_MUX_SINGLE_1, adc);
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8001094:	f7ff fc10 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'g'){
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b67      	cmp	r3, #103	; 0x67
 800109c:	d104      	bne.n	80010a8 <fun_e2_c1+0x98>
		ads1115_set_mux(ADS1115_MUX_SINGLE_2, adc);
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 80010a4:	f7ff fc08 	bl	80008b8 <ads1115_set_mux>
	}
	if (opcion == 'f'){
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b66      	cmp	r3, #102	; 0x66
 80010ac:	d104      	bne.n	80010b8 <fun_e2_c1+0xa8>
		ads1115_set_mux(ADS1115_MUX_SINGLE_3, adc);
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80010b4:	f7ff fc00 	bl	80008b8 <ads1115_set_mux>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <fun_e2_c1+0xc8>)
 80010ba:	f000 f9b9 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff32 	bl	8000f28 <fun_e1_c2>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08004c44 	.word	0x08004c44
 80010d0:	08004c68 	.word	0x08004c68
 80010d4:	08004cd0 	.word	0x08004cd0
 80010d8:	08004d38 	.word	0x08004d38

080010dc <fun_e2_c2>:

void fun_e2_c2(ads1115_adc_t *adc){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	char opcion;

	ads1115_read_config(adc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fad1 	bl	800068c <ads1115_read_config>

	imprimir_cad("\nSeleccione la opcion que desea\n");
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <fun_e2_c2+0x98>)
 80010ec:	f000 f9a0 	bl	8001430 <imprimir_cad>
	imprimir_cad("a PGA = 6.144\nb PGA = 4.096\nc PGA = 2.048\nd PGA = 1.024\ne PGA = 0.512\nf PGA = 0.256\n");
 80010f0:	4821      	ldr	r0, [pc, #132]	; (8001178 <fun_e2_c2+0x9c>)
 80010f2:	f000 f99d 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 80010f6:	f107 030f 	add.w	r3, r7, #15
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f9b0 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b61      	cmp	r3, #97	; 0x61
 8001104:	d103      	bne.n	800110e <fun_e2_c2+0x32>
		ads1115_set_pga(ADS1115_PGA_6_144, adc);
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fbf6 	bl	80008fa <ads1115_set_pga>
	}
	if (opcion == 'b'){
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b62      	cmp	r3, #98	; 0x62
 8001112:	d104      	bne.n	800111e <fun_e2_c2+0x42>
		ads1115_set_pga(ADS1115_PGA_4_096, adc);
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111a:	f7ff fbee 	bl	80008fa <ads1115_set_pga>
	}
	if (opcion == 'c'){
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b63      	cmp	r3, #99	; 0x63
 8001122:	d104      	bne.n	800112e <fun_e2_c2+0x52>
		ads1115_set_pga(ADS1115_PGA_2_048, adc);
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800112a:	f7ff fbe6 	bl	80008fa <ads1115_set_pga>
	}
	if (opcion == 'd'){
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d104      	bne.n	800113e <fun_e2_c2+0x62>
		ads1115_set_pga(ADS1115_PGA_1_024, adc);
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800113a:	f7ff fbde 	bl	80008fa <ads1115_set_pga>
	}
	if (opcion == 'e'){
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b65      	cmp	r3, #101	; 0x65
 8001142:	d104      	bne.n	800114e <fun_e2_c2+0x72>
		ads1115_set_pga(ADS1115_PGA_0_512, adc);
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800114a:	f7ff fbd6 	bl	80008fa <ads1115_set_pga>
	}
	if (opcion == 'f'){
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b66      	cmp	r3, #102	; 0x66
 8001152:	d104      	bne.n	800115e <fun_e2_c2+0x82>
		ads1115_set_pga(ADS1115_PGA_0_256, adc);
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 800115a:	f7ff fbce 	bl	80008fa <ads1115_set_pga>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <fun_e2_c2+0xa0>)
 8001160:	f000 f966 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fedf 	bl	8000f28 <fun_e1_c2>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08004c44 	.word	0x08004c44
 8001178:	08004d54 	.word	0x08004d54
 800117c:	08004d38 	.word	0x08004d38

08001180 <fun_e2_c3>:

void fun_e2_c3(ads1115_adc_t *adc){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	char opcion;

	ads1115_read_config(adc);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fa7f 	bl	800068c <ads1115_read_config>
	imprimir_cad("\nSeleccione el modo que desea\n");
 800118e:	4812      	ldr	r0, [pc, #72]	; (80011d8 <fun_e2_c3+0x58>)
 8001190:	f000 f94e 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Modo continuo\nb Modo de disparo unico\n");
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <fun_e2_c3+0x5c>)
 8001196:	f000 f94b 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f95e 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b61      	cmp	r3, #97	; 0x61
 80011a8:	d103      	bne.n	80011b2 <fun_e2_c3+0x32>
		ads1115_set_mode(ADS1115_MODE_CONTINUOUS, adc);
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fbc5 	bl	800093c <ads1115_set_mode>
	}
	if (opcion == 'b'){
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b62      	cmp	r3, #98	; 0x62
 80011b6:	d104      	bne.n	80011c2 <fun_e2_c3+0x42>
		ads1115_set_mode(ADS1115_MODE_SINGLE_SHOT, adc);
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011be:	f7ff fbbd 	bl	800093c <ads1115_set_mode>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <fun_e2_c3+0x60>)
 80011c4:	f000 f934 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fead 	bl	8000f28 <fun_e1_c2>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08004dac 	.word	0x08004dac
 80011dc:	08004dcc 	.word	0x08004dcc
 80011e0:	08004d38 	.word	0x08004d38

080011e4 <fun_e2_c4>:

void fun_e2_c4(ads1115_adc_t *adc){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	char opcion;
	ads1115_read_config(adc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fa4d 	bl	800068c <ads1115_read_config>

	imprimir_cad("\nSeleccione la tasa que desee\n");
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <fun_e2_c4+0xa8>)
 80011f4:	f000 f91c 	bl	8001430 <imprimir_cad>
	imprimir_cad("a 8 SPS\nb 16 SPS\nc 32 SPS\nd 64 SPS\ne 128 SPS\nf 250 SPS\ng 475 SPS \nh 860 SPS\n");
 80011f8:	4825      	ldr	r0, [pc, #148]	; (8001290 <fun_e2_c4+0xac>)
 80011fa:	f000 f919 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 80011fe:	f107 030f 	add.w	r3, r7, #15
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f92c 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b61      	cmp	r3, #97	; 0x61
 800120c:	d103      	bne.n	8001216 <fun_e2_c4+0x32>
		ads1115_set_rate(ADS1115_RATE_8_SPS, adc);
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fbb4 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'b'){
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b62      	cmp	r3, #98	; 0x62
 800121a:	d103      	bne.n	8001224 <fun_e2_c4+0x40>
		ads1115_set_rate(ADS1115_RATE_16_SPS, adc);
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	2020      	movs	r0, #32
 8001220:	f7ff fbad 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'c'){
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b63      	cmp	r3, #99	; 0x63
 8001228:	d103      	bne.n	8001232 <fun_e2_c4+0x4e>
		ads1115_set_rate(ADS1115_RATE_32_SPS, adc);
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff fba6 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'd'){
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d103      	bne.n	8001240 <fun_e2_c4+0x5c>
		ads1115_set_rate(ADS1115_RATE_64_SPS, adc);
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	2060      	movs	r0, #96	; 0x60
 800123c:	f7ff fb9f 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'e'){
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b65      	cmp	r3, #101	; 0x65
 8001244:	d103      	bne.n	800124e <fun_e2_c4+0x6a>
		ads1115_set_rate(ADS1115_RATE_128_SPS, adc);
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2080      	movs	r0, #128	; 0x80
 800124a:	f7ff fb98 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'f'){
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b66      	cmp	r3, #102	; 0x66
 8001252:	d103      	bne.n	800125c <fun_e2_c4+0x78>
		ads1115_set_rate(ADS1115_RATE_250_SPS, adc);
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	20a0      	movs	r0, #160	; 0xa0
 8001258:	f7ff fb91 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'g'){
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b67      	cmp	r3, #103	; 0x67
 8001260:	d103      	bne.n	800126a <fun_e2_c4+0x86>
		ads1115_set_rate(ADS1115_RATE_475_SPS, adc);
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	20c0      	movs	r0, #192	; 0xc0
 8001266:	f7ff fb8a 	bl	800097e <ads1115_set_rate>
	}
	if (opcion == 'h'){
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b68      	cmp	r3, #104	; 0x68
 800126e:	d103      	bne.n	8001278 <fun_e2_c4+0x94>
		ads1115_set_rate(ADS1115_RATE_860_SPS, adc);
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	20e0      	movs	r0, #224	; 0xe0
 8001274:	f7ff fb83 	bl	800097e <ads1115_set_rate>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <fun_e2_c4+0xb0>)
 800127a:	f000 f8d9 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fe52 	bl	8000f28 <fun_e1_c2>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08004df8 	.word	0x08004df8
 8001290:	08004e18 	.word	0x08004e18
 8001294:	08004d38 	.word	0x08004d38

08001298 <fun_e2_c5>:

void fun_e2_c5(ads1115_adc_t *adc){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	char opcion;

	ads1115_read_config(adc);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f9f3 	bl	800068c <ads1115_read_config>
	imprimir_cad("\nAca se modifica el modo de comparacion\n");
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <fun_e2_c5+0x54>)
 80012a8:	f000 f8c2 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Para comparador tradicional\nb Para ventana de comparacion\n");
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <fun_e2_c5+0x58>)
 80012ae:	f000 f8bf 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 80012b2:	f107 030f 	add.w	r3, r7, #15
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f8d2 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b61      	cmp	r3, #97	; 0x61
 80012c0:	d103      	bne.n	80012ca <fun_e2_c5+0x32>
		ads1115_set_comp_mode(ADS1115_COMPARATOR_TRADITIONAL, adc);
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fb7b 	bl	80009c0 <ads1115_set_comp_mode>
	}
	if (opcion == 'b'){
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b62      	cmp	r3, #98	; 0x62
 80012ce:	d103      	bne.n	80012d8 <fun_e2_c5+0x40>
		ads1115_set_comp_mode(ADS1115_COMPARATOR_WINDOW, adc);
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff fb74 	bl	80009c0 <ads1115_set_comp_mode>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <fun_e2_c5+0x5c>)
 80012da:	f000 f8a9 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fe22 	bl	8000f28 <fun_e1_c2>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08004e68 	.word	0x08004e68
 80012f0:	08004e94 	.word	0x08004e94
 80012f4:	08004d38 	.word	0x08004d38

080012f8 <fun_e2_c6>:

void fun_e2_c6(ads1115_adc_t *adc){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	char opcion;
	ads1115_read_config(adc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff f9c3 	bl	800068c <ads1115_read_config>
	imprimir_cad("\nSeleccione la opcion que desea\n");
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <fun_e2_c6+0x54>)
 8001308:	f000 f892 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Para comparador con polaridad baja\nb Para comparador con polaridad alta\n");
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <fun_e2_c6+0x58>)
 800130e:	f000 f88f 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 8001312:	f107 030f 	add.w	r3, r7, #15
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f8a2 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b61      	cmp	r3, #97	; 0x61
 8001320:	d103      	bne.n	800132a <fun_e2_c6+0x32>
		ads1115_set_comp_pol(ADS1115_COMPARATOR_POLARITY_LO, adc);
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fb6c 	bl	8000a02 <ads1115_set_comp_pol>
	}
	if (opcion == 'b'){
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b62      	cmp	r3, #98	; 0x62
 800132e:	d103      	bne.n	8001338 <fun_e2_c6+0x40>
		ads1115_set_comp_pol(ADS1115_COMPARATOR_POLARITY_HI, adc);
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	2008      	movs	r0, #8
 8001334:	f7ff fb65 	bl	8000a02 <ads1115_set_comp_pol>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <fun_e2_c6+0x5c>)
 800133a:	f000 f879 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fdf2 	bl	8000f28 <fun_e1_c2>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	08004c44 	.word	0x08004c44
 8001350:	08004ed4 	.word	0x08004ed4
 8001354:	08004d38 	.word	0x08004d38

08001358 <fun_e2_c7>:

void fun_e2_c7(ads1115_adc_t *adc){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	char opcion;
	imprimir_cad("\nSeleccione la opcion que desee\n");
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <fun_e2_c7+0x50>)
 8001362:	f000 f865 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Para comparador sin latching\nb Para comparador con latching");
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <fun_e2_c7+0x54>)
 8001368:	f000 f862 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f875 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b61      	cmp	r3, #97	; 0x61
 800137a:	d103      	bne.n	8001384 <fun_e2_c7+0x2c>
		ads1115_set_comp_lat(ADS1115_COMPARATOR_NONLATCHING, adc);
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fb60 	bl	8000a44 <ads1115_set_comp_lat>
	}
	if (opcion == 'b'){
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b62      	cmp	r3, #98	; 0x62
 8001388:	d103      	bne.n	8001392 <fun_e2_c7+0x3a>
		ads1115_set_comp_lat(ADS1115_COMPARATOR_LATCHING, adc);
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff fb59 	bl	8000a44 <ads1115_set_comp_lat>
	}
	imprimir_cad("\nEl cambio fue realizado\n");
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <fun_e2_c7+0x58>)
 8001394:	f000 f84c 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fdc5 	bl	8000f28 <fun_e1_c2>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08004f20 	.word	0x08004f20
 80013ac:	08004f44 	.word	0x08004f44
 80013b0:	08004d38 	.word	0x08004d38

080013b4 <fun_e2_c8>:

void fun_e2_c8(ads1115_adc_t *adc){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	char opcion;
	ads1115_read_config(adc);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff f965 	bl	800068c <ads1115_read_config>

	imprimir_cad("Seleccione las opciones de la fila del comparador\n");
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <fun_e2_c8+0x70>)
 80013c4:	f000 f834 	bl	8001430 <imprimir_cad>
	imprimir_cad("a Para 1 valor\nb Para 2 valores\nc Para 4 valores\nd Para deshabilitar la fila\n");
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <fun_e2_c8+0x74>)
 80013ca:	f000 f831 	bl	8001430 <imprimir_cad>
	recibir_char(&opcion);
 80013ce:	f107 030f 	add.w	r3, r7, #15
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f844 	bl	8001460 <recibir_char>

	if (opcion == 'a'){
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b61      	cmp	r3, #97	; 0x61
 80013dc:	d103      	bne.n	80013e6 <fun_e2_c8+0x32>
		ads1115_set_comp_que(ADS1115_COMPARATOR_QUE_1, adc);
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fb50 	bl	8000a86 <ads1115_set_comp_que>
	}
	if (opcion == 'b'){
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b62      	cmp	r3, #98	; 0x62
 80013ea:	d103      	bne.n	80013f4 <fun_e2_c8+0x40>
		ads1115_set_comp_que(ADS1115_COMPARATOR_QUE_2, adc);
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fb49 	bl	8000a86 <ads1115_set_comp_que>
	}
	if (opcion == 'c'){
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b63      	cmp	r3, #99	; 0x63
 80013f8:	d103      	bne.n	8001402 <fun_e2_c8+0x4e>
		ads1115_set_comp_que(ADS1115_COMPARATOR_QUE_4, adc);
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2002      	movs	r0, #2
 80013fe:	f7ff fb42 	bl	8000a86 <ads1115_set_comp_que>
	}
	if (opcion == 'd'){
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d103      	bne.n	8001410 <fun_e2_c8+0x5c>
		ads1115_set_comp_que(ADS1115_COMPARATOR_QUE_DISABLE, adc);
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	2003      	movs	r0, #3
 800140c:	f7ff fb3b 	bl	8000a86 <ads1115_set_comp_que>
	}

	imprimir_cad("\nEl cambio fue realizado\n");
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <fun_e2_c8+0x78>)
 8001412:	f000 f80d 	bl	8001430 <imprimir_cad>

	fun_e1_c2(adc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fd86 	bl	8000f28 <fun_e1_c2>

}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08004f84 	.word	0x08004f84
 8001428:	08004fb8 	.word	0x08004fb8
 800142c:	08004d38 	.word	0x08004d38

08001430 <imprimir_cad>:

void imprimir_cad(char cadena[]){
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)cadena, strlen(cadena), HAL_MAX_DELAY);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <imprimir_cad+0x2c>)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7fe fe85 	bl	800014c <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4620      	mov	r0, r4
 800144e:	f002 fa77 	bl	8003940 <HAL_UART_Transmit>
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	200000e4 	.word	0x200000e4

08001460 <recibir_char>:
void recibir_char(char *caracter){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint8_t aux;
	HAL_UART_Receive(huart, (uint8_t *)caracter, 1, HAL_MAX_DELAY);
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <recibir_char+0x3c>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f002 fae7 	bl	8003a46 <HAL_UART_Receive>

	while (HAL_UART_Receive(huart, &aux, 1, 10) != HAL_TIMEOUT){
 8001478:	bf00      	nop
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <recibir_char+0x3c>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f107 010f 	add.w	r1, r7, #15
 8001482:	230a      	movs	r3, #10
 8001484:	2201      	movs	r2, #1
 8001486:	f002 fade 	bl	8003a46 <HAL_UART_Receive>
 800148a:	4603      	mov	r3, r0
 800148c:	2b03      	cmp	r3, #3
 800148e:	d1f4      	bne.n	800147a <recibir_char+0x1a>

	}
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000e4 	.word	0x200000e4

080014a0 <char_to_evento>:

void char_to_evento(eventos_e *evento, char letra){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]

	switch(letra){
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	3b61      	subs	r3, #97	; 0x61
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d84b      	bhi.n	800154c <char_to_evento+0xac>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <char_to_evento+0x1c>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	08001505 	.word	0x08001505
 80014c0:	0800150d 	.word	0x0800150d
 80014c4:	08001515 	.word	0x08001515
 80014c8:	0800151d 	.word	0x0800151d
 80014cc:	08001525 	.word	0x08001525
 80014d0:	0800152d 	.word	0x0800152d
 80014d4:	08001535 	.word	0x08001535
 80014d8:	0800153d 	.word	0x0800153d
 80014dc:	0800154d 	.word	0x0800154d
 80014e0:	0800154d 	.word	0x0800154d
 80014e4:	0800154d 	.word	0x0800154d
 80014e8:	0800154d 	.word	0x0800154d
 80014ec:	0800154d 	.word	0x0800154d
 80014f0:	0800154d 	.word	0x0800154d
 80014f4:	0800154d 	.word	0x0800154d
 80014f8:	0800154d 	.word	0x0800154d
 80014fc:	0800154d 	.word	0x0800154d
 8001500:	08001545 	.word	0x08001545
	case 'a':
		*evento = A;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
		break;
 800150a:	e023      	b.n	8001554 <char_to_evento+0xb4>
	case 'b':
		*evento = B;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
		break;
 8001512:	e01f      	b.n	8001554 <char_to_evento+0xb4>
	case 'c':
		*evento = C;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
		break;
 800151a:	e01b      	b.n	8001554 <char_to_evento+0xb4>
	case 'd':
		*evento = D;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	701a      	strb	r2, [r3, #0]
		break;
 8001522:	e017      	b.n	8001554 <char_to_evento+0xb4>
	case 'e':
		*evento = E;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2204      	movs	r2, #4
 8001528:	701a      	strb	r2, [r3, #0]
		break;
 800152a:	e013      	b.n	8001554 <char_to_evento+0xb4>
	case 'f':
		*evento = F;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2205      	movs	r2, #5
 8001530:	701a      	strb	r2, [r3, #0]
		break;
 8001532:	e00f      	b.n	8001554 <char_to_evento+0xb4>
	case 'g':
		*evento = G;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2206      	movs	r2, #6
 8001538:	701a      	strb	r2, [r3, #0]
		break;
 800153a:	e00b      	b.n	8001554 <char_to_evento+0xb4>
	case 'h':
		*evento = H;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2207      	movs	r2, #7
 8001540:	701a      	strb	r2, [r3, #0]
		break;
 8001542:	e007      	b.n	8001554 <char_to_evento+0xb4>
	case 'r':
		*evento = R;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2208      	movs	r2, #8
 8001548:	701a      	strb	r2, [r3, #0]
		break;
 800154a:	e003      	b.n	8001554 <char_to_evento+0xb4>
	default:
		*evento = N;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2209      	movs	r2, #9
 8001550:	701a      	strb	r2, [r3, #0]
		break;
 8001552:	bf00      	nop
	}
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 fa51 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f82f 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f000 f8c1 	bl	80016f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001572:	f000 f867 	bl	8001644 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001576:	f000 f893 	bl	80016a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ads1115_init(ADS1115_I2C_ADDR, &hi2c1, &adc);
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <main+0x58>)
 800157c:	490f      	ldr	r1, [pc, #60]	; (80015bc <main+0x5c>)
 800157e:	2048      	movs	r0, #72	; 0x48
 8001580:	f7ff f870 	bl	8000664 <ads1115_init>
  HAL_Delay(3000);
 8001584:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001588:	f000 faa2 	bl	8001ad0 <HAL_Delay>
  fsm_init(&estado, &evento, &huart1);
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <main+0x60>)
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <main+0x64>)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <main+0x68>)
 8001592:	f7ff fa99 	bl	8000ac8 <fsm_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  recibir_char(&letra);
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff61 	bl	8001460 <recibir_char>

	  char_to_evento(&evento, letra);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <main+0x64>)
 80015a4:	f7ff ff7c 	bl	80014a0 <char_to_evento>

	  fsm_switch(&estado, evento, &adc);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <main+0x64>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4a02      	ldr	r2, [pc, #8]	; (80015b8 <main+0x58>)
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <main+0x68>)
 80015b2:	f7ff faa3 	bl	8000afc <fsm_switch>
	  recibir_char(&letra);
 80015b6:	e7ee      	b.n	8001596 <main+0x36>
 80015b8:	20000184 	.word	0x20000184
 80015bc:	200000e8 	.word	0x200000e8
 80015c0:	2000013c 	.word	0x2000013c
 80015c4:	2000018c 	.word	0x2000018c
 80015c8:	2000018d 	.word	0x2000018d

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b090      	sub	sp, #64	; 0x40
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fbe2 	bl	8003da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f2:	2301      	movs	r3, #1
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f6:	2310      	movs	r3, #16
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fd3c 	bl	8003080 <HAL_RCC_OscConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800160e:	f000 f8b1 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001612:	230f      	movs	r3, #15
 8001614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f001 ffaa 	bl	8003584 <HAL_RCC_ClockConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001636:	f000 f89d 	bl	8001774 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3740      	adds	r7, #64	; 0x40
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f000 fcc9 	bl	8002018 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f872 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000e8 	.word	0x200000e8
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_USART1_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART1_UART_Init+0x4c>)
 80016d8:	f002 f8e2 	bl	80038a0 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f000 f847 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000013c 	.word	0x2000013c
 80016f0:	40013800 	.word	0x40013800

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0x78>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <MX_GPIO_Init+0x78>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_GPIO_Init+0x78>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_GPIO_Init+0x78>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MX_GPIO_Init+0x78>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_GPIO_Init+0x78>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_GPIO_Init+0x78>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_GPIO_Init+0x78>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_GPIO_Init+0x78>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <MX_GPIO_Init+0x7c>)
 8001756:	f000 fac3 	bl	8001ce0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	21c0      	movs	r1, #192	; 0xc0
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_GPIO_Init+0x7c>)
 8001760:	f000 fc42 	bl	8001fe8 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	40010c00 	.word	0x40010c00

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_MspInit+0x5c>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_MspInit+0x5c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_MspInit+0x5c>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x5c>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_MspInit+0x5c>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x5c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_MspInit+0x60>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_MspInit+0x60>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010000 	.word	0x40010000

080017e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_I2C_MspInit+0x70>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d123      	bne.n	800184c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_I2C_MspInit+0x74>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_I2C_MspInit+0x74>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_I2C_MspInit+0x74>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181c:	23c0      	movs	r3, #192	; 0xc0
 800181e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_I2C_MspInit+0x78>)
 8001830:	f000 fa56 	bl	8001ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0x74>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_I2C_MspInit+0x74>)
 800183a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183e:	61d3      	str	r3, [r2, #28]
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_I2C_MspInit+0x74>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	40010c00 	.word	0x40010c00

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_UART_MspInit+0x8c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d131      	bne.n	80018e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_UART_MspInit+0x90>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <HAL_UART_MspInit+0x90>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0x90>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0x90>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_UART_MspInit+0x90>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_UART_MspInit+0x90>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	4619      	mov	r1, r3
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <HAL_UART_MspInit+0x94>)
 80018c6:	f000 fa0b 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_UART_MspInit+0x94>)
 80018e0:	f000 f9fe 	bl	8001ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f8ab 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f002 fa1c 	bl	8003db4 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20005000 	.word	0x20005000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000190 	.word	0x20000190
 80019b0:	200002e0 	.word	0x200002e0

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff fff8 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 f9e9 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fdb7 	bl	8001560 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80019fc:	08005070 	.word	0x08005070
  ldr r2, =_sbss
 8001a00:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001a04:	200002e0 	.word	0x200002e0

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f92b 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff feaa 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f935 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f90b 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000068 	.word	0x20000068
 8001a90:	20000070 	.word	0x20000070
 8001a94:	2000006c 	.word	0x2000006c

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000070 	.word	0x20000070
 8001ab8:	20000194 	.word	0x20000194

08001abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_GetTick+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000194 	.word	0x20000194

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffe0 	bl	8001abc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000070 	.word	0x20000070

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff90 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff49 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff5e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffb0 	bl	8001c34 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e169      	b.n	8001fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8158 	bne.w	8001fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d1c:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d875      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d058      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d28:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d86f      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d2e:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d052      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d869      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d3a:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04c      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d40:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d863      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d46:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d046      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d4c:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d85d      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d82a      	bhi.n	8001dac <HAL_GPIO_Init+0xcc>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d859      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_GPIO_Init+0x80>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001e09 	.word	0x08001e09
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001e0f 	.word	0x08001e0f
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e0f 	.word	0x08001e0f
 8001d8c:	08001e0f 	.word	0x08001e0f
 8001d90:	08001e0f 	.word	0x08001e0f
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e0f 	.word	0x08001e0f
 8001da0:	08001e0f 	.word	0x08001e0f
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	4a79      	ldr	r2, [pc, #484]	; (8001f94 <HAL_GPIO_Init+0x2b4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db2:	e02c      	b.n	8001e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e029      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e024      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e01f      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e01a      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	2304      	movs	r3, #4
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e013      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	611a      	str	r2, [r3, #16]
          break;
 8001dfa:	e009      	b.n	8001e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	615a      	str	r2, [r3, #20]
          break;
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          break;
 8001e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d801      	bhi.n	8001e1a <HAL_GPIO_Init+0x13a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_Init+0x13e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d802      	bhi.n	8001e2c <HAL_GPIO_Init+0x14c>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x152>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	210f      	movs	r1, #15
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80b1 	beq.w	8001fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_GPIO_Init+0x2c0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_GPIO_Init+0x2cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1e0>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ede:	492f      	ldr	r1, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	492c      	ldr	r1, [pc, #176]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	491e      	ldr	r1, [pc, #120]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d021      	beq.n	8001fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x2e2>
 8001f7e:	bf00      	nop
 8001f80:	10320000 	.word	0x10320000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	10110000 	.word	0x10110000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ae8e 	bne.w	8001cf4 <HAL_GPIO_Init+0x14>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002004:	e003      	b.n	800200e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e12b      	b.n	8002282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fbd0 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800207c:	f001 fbca 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8002080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a81      	ldr	r2, [pc, #516]	; (800228c <HAL_I2C_Init+0x274>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d807      	bhi.n	800209c <HAL_I2C_Init+0x84>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_I2C_Init+0x278>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e006      	b.n	80020aa <HAL_I2C_Init+0x92>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a7d      	ldr	r2, [pc, #500]	; (8002294 <HAL_I2C_Init+0x27c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0e7      	b.n	8002282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a78      	ldr	r2, [pc, #480]	; (8002298 <HAL_I2C_Init+0x280>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_I2C_Init+0x274>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d802      	bhi.n	80020ec <HAL_I2C_Init+0xd4>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3301      	adds	r3, #1
 80020ea:	e009      	b.n	8002100 <HAL_I2C_Init+0xe8>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	4a69      	ldr	r2, [pc, #420]	; (800229c <HAL_I2C_Init+0x284>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	3301      	adds	r3, #1
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	430b      	orrs	r3, r1
 8002106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	495c      	ldr	r1, [pc, #368]	; (800228c <HAL_I2C_Init+0x274>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d819      	bhi.n	8002154 <HAL_I2C_Init+0x13c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e59      	subs	r1, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fbb1 f3f3 	udiv	r3, r1, r3
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002134:	400b      	ands	r3, r1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_I2C_Init+0x138>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e59      	subs	r1, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fbb1 f3f3 	udiv	r3, r1, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	e051      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002150:	2304      	movs	r3, #4
 8002152:	e04f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <HAL_I2C_Init+0x168>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e012      	b.n	80021a6 <HAL_I2C_Init+0x18e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Init+0x196>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e022      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <HAL_I2C_Init+0x1bc>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e58      	subs	r0, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6809      	ldr	r1, [r1, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6911      	ldr	r1, [r2, #16]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68d2      	ldr	r2, [r2, #12]
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	000186a0 	.word	0x000186a0
 8002290:	001e847f 	.word	0x001e847f
 8002294:	003d08ff 	.word	0x003d08ff
 8002298:	431bde83 	.word	0x431bde83
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	461a      	mov	r2, r3
 80022ac:	460b      	mov	r3, r1
 80022ae:	817b      	strh	r3, [r7, #10]
 80022b0:	4613      	mov	r3, r2
 80022b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fc02 	bl	8001abc <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 80e0 	bne.w	8002488 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2319      	movs	r3, #25
 80022ce:	2201      	movs	r2, #1
 80022d0:	4970      	ldr	r1, [pc, #448]	; (8002494 <HAL_I2C_Master_Transmit+0x1f4>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fc9e 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	e0d3      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2C_Master_Transmit+0x50>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e0cc      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d007      	beq.n	8002316 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2221      	movs	r2, #33	; 0x21
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2210      	movs	r2, #16
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_I2C_Master_Transmit+0x1f8>)
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002358:	8979      	ldrh	r1, [r7, #10]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fb08 	bl	8002974 <I2C_MasterRequestWrite>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08d      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002384:	e066      	b.n	8002454 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	6a39      	ldr	r1, [r7, #32]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fd5c 	bl	8002e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2b04      	cmp	r3, #4
 800239c:	d107      	bne.n	80023ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d11b      	bne.n	8002428 <HAL_I2C_Master_Transmit+0x188>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d017      	beq.n	8002428 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	6a39      	ldr	r1, [r7, #32]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fd53 	bl	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b04      	cmp	r3, #4
 800243e:	d107      	bne.n	8002450 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e01a      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d194      	bne.n	8002386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	00100002 	.word	0x00100002
 8002498:	ffff0000 	.word	0xffff0000

0800249c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	461a      	mov	r2, r3
 80024a8:	460b      	mov	r3, r1
 80024aa:	817b      	strh	r3, [r7, #10]
 80024ac:	4613      	mov	r3, r2
 80024ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff fb02 	bl	8001abc <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	f040 824b 	bne.w	800295e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2319      	movs	r3, #25
 80024ce:	2201      	movs	r2, #1
 80024d0:	497f      	ldr	r1, [pc, #508]	; (80026d0 <HAL_I2C_Master_Receive+0x234>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fb9e 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	e23e      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_I2C_Master_Receive+0x54>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e237      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d007      	beq.n	8002516 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002524:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2222      	movs	r2, #34	; 0x22
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2210      	movs	r2, #16
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a5f      	ldr	r2, [pc, #380]	; (80026d4 <HAL_I2C_Master_Receive+0x238>)
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002558:	8979      	ldrh	r1, [r7, #10]
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fa8a 	bl	8002a78 <I2C_MasterRequestRead>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1f8      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d113      	bne.n	800259e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e1cc      	b.n	8002938 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d11e      	bne.n	80025e4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025b6:	b672      	cpsid	i
}
 80025b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e0:	b662      	cpsie	i
}
 80025e2:	e035      	b.n	8002650 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11e      	bne.n	800262a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002626:	b662      	cpsie	i
}
 8002628:	e012      	b.n	8002650 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002650:	e172      	b.n	8002938 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	2b03      	cmp	r3, #3
 8002658:	f200 811f 	bhi.w	800289a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b01      	cmp	r3, #1
 8002662:	d123      	bne.n	80026ac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc7d 	bl	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e173      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026aa:	e145      	b.n	8002938 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d152      	bne.n	800275a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	2200      	movs	r2, #0
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_I2C_Master_Receive+0x23c>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 faa8 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e148      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
 80026ce:	bf00      	nop
 80026d0:	00100002 	.word	0x00100002
 80026d4:	ffff0000 	.word	0xffff0000
 80026d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002722:	b662      	cpsie	i
}
 8002724:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002758:	e0ee      	b.n	8002938 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	2200      	movs	r2, #0
 8002762:	4981      	ldr	r1, [pc, #516]	; (8002968 <HAL_I2C_Master_Receive+0x4cc>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fa55 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0f5      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027ba:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_I2C_Master_Receive+0x4d0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	4a6b      	ldr	r2, [pc, #428]	; (8002970 <HAL_I2C_Master_Receive+0x4d4>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0a1a      	lsrs	r2, r3, #8
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00da      	lsls	r2, r3, #3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d118      	bne.n	8002812 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002802:	b662      	cpsie	i
}
 8002804:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a6      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b04      	cmp	r3, #4
 800281e:	d1d9      	bne.n	80027d4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002862:	b662      	cpsie	i
}
 8002864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002898:	e04e      	b.n	8002938 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fb62 	bl	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e058      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d124      	bne.n	8002938 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f ae88 	bne.w	8002652 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010004 	.word	0x00010004
 800296c:	20000068 	.word	0x20000068
 8002970:	14f8b589 	.word	0x14f8b589

08002974 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	460b      	mov	r3, r1
 8002982:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d006      	beq.n	800299e <I2C_MasterRequestWrite+0x2a>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d003      	beq.n	800299e <I2C_MasterRequestWrite+0x2a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800299c:	d108      	bne.n	80029b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e00b      	b.n	80029c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	2b12      	cmp	r3, #18
 80029b6:	d107      	bne.n	80029c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f91d 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00d      	beq.n	80029fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d103      	bne.n	80029f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e035      	b.n	8002a68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a04:	d108      	bne.n	8002a18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a06:	897b      	ldrh	r3, [r7, #10]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a14:	611a      	str	r2, [r3, #16]
 8002a16:	e01b      	b.n	8002a50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a18:	897b      	ldrh	r3, [r7, #10]
 8002a1a:	11db      	asrs	r3, r3, #7
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 0306 	and.w	r3, r3, #6
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f063 030f 	orn	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <I2C_MasterRequestWrite+0xfc>)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f966 	bl	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e010      	b.n	8002a68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <I2C_MasterRequestWrite+0x100>)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f956 	bl	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	00010008 	.word	0x00010008
 8002a74:	00010002 	.word	0x00010002

08002a78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	460b      	mov	r3, r1
 8002a86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d006      	beq.n	8002ab2 <I2C_MasterRequestRead+0x3a>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d003      	beq.n	8002ab2 <I2C_MasterRequestRead+0x3a>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e00b      	b.n	8002adc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	2b11      	cmp	r3, #17
 8002aca:	d107      	bne.n	8002adc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f893 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b02:	d103      	bne.n	8002b0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e079      	b.n	8002c04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b18:	d108      	bne.n	8002b2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	e05f      	b.n	8002bec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	11db      	asrs	r3, r3, #7
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 0306 	and.w	r3, r3, #6
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f063 030f 	orn	r3, r3, #15
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4930      	ldr	r1, [pc, #192]	; (8002c0c <I2C_MasterRequestRead+0x194>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f8dc 	bl	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e054      	b.n	8002c04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4929      	ldr	r1, [pc, #164]	; (8002c10 <I2C_MasterRequestRead+0x198>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f8cc 	bl	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e044      	b.n	8002c04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f831 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d103      	bne.n	8002bd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e017      	b.n	8002c04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030e 	orn	r3, r3, #14
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <I2C_MasterRequestRead+0x198>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f888 	bl	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010008 	.word	0x00010008
 8002c10:	00010002 	.word	0x00010002

08002c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	e048      	b.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d044      	beq.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe ff45 	bl	8001abc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d139      	bne.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	0c1b      	lsrs	r3, r3, #16
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10d      	bne.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	43da      	mvns	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	e00c      	b.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d116      	bne.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e023      	b.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10d      	bne.n	8002cde <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	e00c      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d093      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d16:	e071      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d123      	bne.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e067      	b.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d041      	beq.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d78:	f7fe fea0 	bl	8001abc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d136      	bne.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e00b      	b.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e021      	b.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10c      	bne.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e00b      	b.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f af6d 	bne.w	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e54:	e034      	b.n	8002ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f8e3 	bl	8003022 <I2C_IsAcknowledgeFailed>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e034      	b.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d028      	beq.n	8002ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fe fe25 	bl	8001abc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11d      	bne.n	8002ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d016      	beq.n	8002ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d1c3      	bne.n	8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee4:	e034      	b.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f89b 	bl	8003022 <I2C_IsAcknowledgeFailed>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e034      	b.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d028      	beq.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fddd 	bl	8001abc <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11d      	bne.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d016      	beq.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e007      	b.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d1c3      	bne.n	8002ee6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f74:	e049      	b.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d119      	bne.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e030      	b.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb8:	f7fe fd80 	bl	8001abc <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d302      	bcc.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11d      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d016      	beq.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d1ae      	bne.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d11b      	bne.n	8003072 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003042:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e272      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8087 	beq.w	80031ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d00c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ac:	4b8f      	ldr	r3, [pc, #572]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d112      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
 80030b8:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d10b      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06c      	beq.n	80031ac <HAL_RCC_OscConfig+0x12c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d168      	bne.n	80031ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e24c      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x76>
 80030e8:	4b80      	ldr	r3, [pc, #512]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7f      	ldr	r2, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e02e      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7b      	ldr	r3, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7a      	ldr	r2, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b78      	ldr	r3, [pc, #480]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a77      	ldr	r2, [pc, #476]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0xbc>
 8003122:	4b72      	ldr	r3, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a71      	ldr	r2, [pc, #452]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 800313c:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fcae 	bl	8001abc <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fcaa 	bl	8001abc <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e200      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xe4>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fc9a 	bl	8001abc <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fc96 	bl	8001abc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ec      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x10c>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c0      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4939      	ldr	r1, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fc4f 	bl	8001abc <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe fc4b 	bl	8001abc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4927      	ldr	r1, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fc2e 	bl	8001abc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe fc2a 	bl	8001abc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e180      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fc0e 	bl	8001abc <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc0a 	bl	8001abc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e160      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 face 	bl	8003864 <RCC_Delay>
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7fe fbf4 	bl	8001abc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe fbf0 	bl	8001abc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e146      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	42420000 	.word	0x42420000
 80032f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e9      	bne.n	80032d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a6 	beq.w	800345e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a87      	ldr	r2, [pc, #540]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fe fbb1 	bl	8001abc <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe fbad 	bl	8001abc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e103      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	4b75      	ldr	r3, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x312>
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x334>
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a66      	ldr	r2, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6213      	str	r3, [r2, #32]
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x356>
 80033bc:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6213      	str	r3, [r2, #32]
 80033e2:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fb61 	bl	8001abc <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe fb5d 	bl	8001abc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0b1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x37e>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe fb4b 	bl	8001abc <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fb47 	bl	8001abc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e09b      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d061      	beq.n	8003538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d146      	bne.n	800350a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe fb1b 	bl	8001abc <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fe fb17 	bl	8001abc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e06d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4921      	ldr	r1, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a19      	ldr	r1, [r3, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	430b      	orrs	r3, r1
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe faeb 	bl	8001abc <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe fae7 	bl	8001abc <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x46a>
 8003508:	e035      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fad4 	bl	8001abc <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe fad0 	bl	8001abc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e026      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x498>
 8003536:	e01e      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e019      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x500>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4965      	ldr	r1, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d040      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e073      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4936      	ldr	r1, [pc, #216]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fe fa22 	bl	8001abc <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fe fa1e 	bl	8001abc <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e053      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d210      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4922      	ldr	r1, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe f980 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	08005008 	.word	0x08005008
 8003750:	20000068 	.word	0x20000068
 8003754:	2000006c 	.word	0x2000006c

08003758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x30>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x36>
 8003786:	e027      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	e027      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	0c5b      	lsrs	r3, r3, #17
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e004      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0c      	ldr	r2, [pc, #48]	; (80037fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037da:	613b      	str	r3, [r7, #16]
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	693b      	ldr	r3, [r7, #16]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	007a1200 	.word	0x007a1200
 80037f4:	08005020 	.word	0x08005020
 80037f8:	08005030 	.word	0x08005030
 80037fc:	003d0900 	.word	0x003d0900

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <HAL_RCC_GetHCLKFreq+0x10>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	20000068 	.word	0x20000068

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff2 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08005018 	.word	0x08005018

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003840:	f7ff ffde 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0adb      	lsrs	r3, r3, #11
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	08005018 	.word	0x08005018

08003864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <RCC_Delay+0x34>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <RCC_Delay+0x38>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003880:	bf00      	nop
  }
  while (Delay --);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	60fa      	str	r2, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f9      	bne.n	8003880 <RCC_Delay+0x1c>
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000068 	.word	0x20000068
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e042      	b.n	8003938 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd ffca 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9af 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	d16d      	bne.n	8003a3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_UART_Transmit+0x2c>
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e066      	b.n	8003a3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2221      	movs	r2, #33	; 0x21
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397e:	f7fe f89d 	bl	8001abc <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d108      	bne.n	80039ac <HAL_UART_Transmit+0x6c>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	e003      	b.n	80039b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b4:	e02a      	b.n	8003a0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8d2 	bl	8003b6a <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e036      	b.n	8003a3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	3302      	adds	r3, #2
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	e007      	b.n	80039fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1cf      	bne.n	80039b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f8a2 	bl	8003b6a <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b08a      	sub	sp, #40	; 0x28
 8003a4a:	af02      	add	r7, sp, #8
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d17c      	bne.n	8003b60 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_Receive+0x2c>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e075      	b.n	8003b62 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2222      	movs	r2, #34	; 0x22
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe f817 	bl	8001abc <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa4:	d108      	bne.n	8003ab8 <HAL_UART_Receive+0x72>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e003      	b.n	8003ac0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ac0:	e043      	b.n	8003b4a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2120      	movs	r1, #32
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f84c 	bl	8003b6a <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e042      	b.n	8003b62 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	3302      	adds	r3, #2
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e01f      	b.n	8003b3c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d007      	beq.n	8003b16 <HAL_UART_Receive+0xd0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_UART_Receive+0xde>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e008      	b.n	8003b36 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1b6      	bne.n	8003ac2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b090      	sub	sp, #64	; 0x40
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7a:	e050      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d04c      	beq.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b8a:	f7fd ff97 	bl	8001abc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d241      	bcs.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bba:	637a      	str	r2, [r7, #52]	; 0x34
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e5      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bee:	623a      	str	r2, [r7, #32]
 8003bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	69f9      	ldr	r1, [r7, #28]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e00f      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d09f      	beq.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3740      	adds	r7, #64	; 0x40
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c82:	f023 030c 	bic.w	r3, r3, #12
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <UART_SetConfig+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7ff fdc4 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	e002      	b.n	8003cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7ff fdac 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	4a22      	ldr	r2, [pc, #136]	; (8003d60 <UART_SetConfig+0x118>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	0119      	lsls	r1, r3, #4
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009a      	lsls	r2, r3, #2
 8003ce8:	441a      	add	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <UART_SetConfig+0x118>)
 8003cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2064      	movs	r0, #100	; 0x64
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	; 0x32
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <UART_SetConfig+0x118>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	4419      	add	r1, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <UART_SetConfig+0x118>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2064      	movs	r0, #100	; 0x64
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <UART_SetConfig+0x118>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	440a      	add	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013800 	.word	0x40013800
 8003d60:	51eb851f 	.word	0x51eb851f

08003d64 <siprintf>:
 8003d64:	b40e      	push	{r1, r2, r3}
 8003d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d6a:	b500      	push	{lr}
 8003d6c:	b09c      	sub	sp, #112	; 0x70
 8003d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d70:	9002      	str	r0, [sp, #8]
 8003d72:	9006      	str	r0, [sp, #24]
 8003d74:	9107      	str	r1, [sp, #28]
 8003d76:	9104      	str	r1, [sp, #16]
 8003d78:	4808      	ldr	r0, [pc, #32]	; (8003d9c <siprintf+0x38>)
 8003d7a:	4909      	ldr	r1, [pc, #36]	; (8003da0 <siprintf+0x3c>)
 8003d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d80:	9105      	str	r1, [sp, #20]
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	a902      	add	r1, sp, #8
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	f000 f98e 	bl	80040a8 <_svfiprintf_r>
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	9b02      	ldr	r3, [sp, #8]
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	b01c      	add	sp, #112	; 0x70
 8003d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d98:	b003      	add	sp, #12
 8003d9a:	4770      	bx	lr
 8003d9c:	200000c0 	.word	0x200000c0
 8003da0:	ffff0208 	.word	0xffff0208

08003da4 <memset>:
 8003da4:	4603      	mov	r3, r0
 8003da6:	4402      	add	r2, r0
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d100      	bne.n	8003dae <memset+0xa>
 8003dac:	4770      	bx	lr
 8003dae:	f803 1b01 	strb.w	r1, [r3], #1
 8003db2:	e7f9      	b.n	8003da8 <memset+0x4>

08003db4 <__errno>:
 8003db4:	4b01      	ldr	r3, [pc, #4]	; (8003dbc <__errno+0x8>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	200000c0 	.word	0x200000c0

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	; (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1b64      	subs	r4, r4, r5
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	f000 fc7a 	bl	80046c8 <_init>
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	4d0a      	ldr	r5, [pc, #40]	; (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	; (8003e04 <__libc_init_array+0x44>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08005068 	.word	0x08005068
 8003dfc:	08005068 	.word	0x08005068
 8003e00:	08005068 	.word	0x08005068
 8003e04:	0800506c 	.word	0x0800506c

08003e08 <__retarget_lock_acquire_recursive>:
 8003e08:	4770      	bx	lr

08003e0a <__retarget_lock_release_recursive>:
 8003e0a:	4770      	bx	lr

08003e0c <_free_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4605      	mov	r5, r0
 8003e10:	2900      	cmp	r1, #0
 8003e12:	d040      	beq.n	8003e96 <_free_r+0x8a>
 8003e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e18:	1f0c      	subs	r4, r1, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	18e4      	addlt	r4, r4, r3
 8003e20:	f000 f8dc 	bl	8003fdc <__malloc_lock>
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <_free_r+0x8c>)
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	b933      	cbnz	r3, 8003e38 <_free_r+0x2c>
 8003e2a:	6063      	str	r3, [r4, #4]
 8003e2c:	6014      	str	r4, [r2, #0]
 8003e2e:	4628      	mov	r0, r5
 8003e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e34:	f000 b8d8 	b.w	8003fe8 <__malloc_unlock>
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	d908      	bls.n	8003e4e <_free_r+0x42>
 8003e3c:	6820      	ldr	r0, [r4, #0]
 8003e3e:	1821      	adds	r1, r4, r0
 8003e40:	428b      	cmp	r3, r1
 8003e42:	bf01      	itttt	eq
 8003e44:	6819      	ldreq	r1, [r3, #0]
 8003e46:	685b      	ldreq	r3, [r3, #4]
 8003e48:	1809      	addeq	r1, r1, r0
 8003e4a:	6021      	streq	r1, [r4, #0]
 8003e4c:	e7ed      	b.n	8003e2a <_free_r+0x1e>
 8003e4e:	461a      	mov	r2, r3
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b10b      	cbz	r3, 8003e58 <_free_r+0x4c>
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	d9fa      	bls.n	8003e4e <_free_r+0x42>
 8003e58:	6811      	ldr	r1, [r2, #0]
 8003e5a:	1850      	adds	r0, r2, r1
 8003e5c:	42a0      	cmp	r0, r4
 8003e5e:	d10b      	bne.n	8003e78 <_free_r+0x6c>
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	4401      	add	r1, r0
 8003e64:	1850      	adds	r0, r2, r1
 8003e66:	4283      	cmp	r3, r0
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	d1e0      	bne.n	8003e2e <_free_r+0x22>
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4408      	add	r0, r1
 8003e72:	6010      	str	r0, [r2, #0]
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	e7da      	b.n	8003e2e <_free_r+0x22>
 8003e78:	d902      	bls.n	8003e80 <_free_r+0x74>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	e7d6      	b.n	8003e2e <_free_r+0x22>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	1821      	adds	r1, r4, r0
 8003e84:	428b      	cmp	r3, r1
 8003e86:	bf01      	itttt	eq
 8003e88:	6819      	ldreq	r1, [r3, #0]
 8003e8a:	685b      	ldreq	r3, [r3, #4]
 8003e8c:	1809      	addeq	r1, r1, r0
 8003e8e:	6021      	streq	r1, [r4, #0]
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	6054      	str	r4, [r2, #4]
 8003e94:	e7cb      	b.n	8003e2e <_free_r+0x22>
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	200002d8 	.word	0x200002d8

08003e9c <sbrk_aligned>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4e0e      	ldr	r6, [pc, #56]	; (8003ed8 <sbrk_aligned+0x3c>)
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	6831      	ldr	r1, [r6, #0]
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	b911      	cbnz	r1, 8003eae <sbrk_aligned+0x12>
 8003ea8:	f000 fbaa 	bl	8004600 <_sbrk_r>
 8003eac:	6030      	str	r0, [r6, #0]
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 fba5 	bl	8004600 <_sbrk_r>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d00a      	beq.n	8003ed0 <sbrk_aligned+0x34>
 8003eba:	1cc4      	adds	r4, r0, #3
 8003ebc:	f024 0403 	bic.w	r4, r4, #3
 8003ec0:	42a0      	cmp	r0, r4
 8003ec2:	d007      	beq.n	8003ed4 <sbrk_aligned+0x38>
 8003ec4:	1a21      	subs	r1, r4, r0
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fb9a 	bl	8004600 <_sbrk_r>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d101      	bne.n	8003ed4 <sbrk_aligned+0x38>
 8003ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	200002dc 	.word	0x200002dc

08003edc <_malloc_r>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	1ccd      	adds	r5, r1, #3
 8003ee2:	f025 0503 	bic.w	r5, r5, #3
 8003ee6:	3508      	adds	r5, #8
 8003ee8:	2d0c      	cmp	r5, #12
 8003eea:	bf38      	it	cc
 8003eec:	250c      	movcc	r5, #12
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	db01      	blt.n	8003ef8 <_malloc_r+0x1c>
 8003ef4:	42a9      	cmp	r1, r5
 8003ef6:	d905      	bls.n	8003f04 <_malloc_r+0x28>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	2600      	movs	r6, #0
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4630      	mov	r0, r6
 8003f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003fd8 <_malloc_r+0xfc>
 8003f08:	f000 f868 	bl	8003fdc <__malloc_lock>
 8003f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f10:	461c      	mov	r4, r3
 8003f12:	bb5c      	cbnz	r4, 8003f6c <_malloc_r+0x90>
 8003f14:	4629      	mov	r1, r5
 8003f16:	4638      	mov	r0, r7
 8003f18:	f7ff ffc0 	bl	8003e9c <sbrk_aligned>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	4604      	mov	r4, r0
 8003f20:	d155      	bne.n	8003fce <_malloc_r+0xf2>
 8003f22:	f8d8 4000 	ldr.w	r4, [r8]
 8003f26:	4626      	mov	r6, r4
 8003f28:	2e00      	cmp	r6, #0
 8003f2a:	d145      	bne.n	8003fb8 <_malloc_r+0xdc>
 8003f2c:	2c00      	cmp	r4, #0
 8003f2e:	d048      	beq.n	8003fc2 <_malloc_r+0xe6>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	4631      	mov	r1, r6
 8003f34:	4638      	mov	r0, r7
 8003f36:	eb04 0903 	add.w	r9, r4, r3
 8003f3a:	f000 fb61 	bl	8004600 <_sbrk_r>
 8003f3e:	4581      	cmp	r9, r0
 8003f40:	d13f      	bne.n	8003fc2 <_malloc_r+0xe6>
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	4638      	mov	r0, r7
 8003f46:	1a6d      	subs	r5, r5, r1
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7ff ffa7 	bl	8003e9c <sbrk_aligned>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d037      	beq.n	8003fc2 <_malloc_r+0xe6>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	442b      	add	r3, r5
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d038      	beq.n	8003fd2 <_malloc_r+0xf6>
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	42a2      	cmp	r2, r4
 8003f64:	d12b      	bne.n	8003fbe <_malloc_r+0xe2>
 8003f66:	2200      	movs	r2, #0
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e00f      	b.n	8003f8c <_malloc_r+0xb0>
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	1b52      	subs	r2, r2, r5
 8003f70:	d41f      	bmi.n	8003fb2 <_malloc_r+0xd6>
 8003f72:	2a0b      	cmp	r2, #11
 8003f74:	d917      	bls.n	8003fa6 <_malloc_r+0xca>
 8003f76:	1961      	adds	r1, r4, r5
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	6025      	str	r5, [r4, #0]
 8003f7c:	bf18      	it	ne
 8003f7e:	6059      	strne	r1, [r3, #4]
 8003f80:	6863      	ldr	r3, [r4, #4]
 8003f82:	bf08      	it	eq
 8003f84:	f8c8 1000 	streq.w	r1, [r8]
 8003f88:	5162      	str	r2, [r4, r5]
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f104 060b 	add.w	r6, r4, #11
 8003f92:	f000 f829 	bl	8003fe8 <__malloc_unlock>
 8003f96:	f026 0607 	bic.w	r6, r6, #7
 8003f9a:	1d23      	adds	r3, r4, #4
 8003f9c:	1af2      	subs	r2, r6, r3
 8003f9e:	d0ae      	beq.n	8003efe <_malloc_r+0x22>
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	50a3      	str	r3, [r4, r2]
 8003fa4:	e7ab      	b.n	8003efe <_malloc_r+0x22>
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	6862      	ldr	r2, [r4, #4]
 8003faa:	d1dd      	bne.n	8003f68 <_malloc_r+0x8c>
 8003fac:	f8c8 2000 	str.w	r2, [r8]
 8003fb0:	e7ec      	b.n	8003f8c <_malloc_r+0xb0>
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	6864      	ldr	r4, [r4, #4]
 8003fb6:	e7ac      	b.n	8003f12 <_malloc_r+0x36>
 8003fb8:	4634      	mov	r4, r6
 8003fba:	6876      	ldr	r6, [r6, #4]
 8003fbc:	e7b4      	b.n	8003f28 <_malloc_r+0x4c>
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	e7cc      	b.n	8003f5c <_malloc_r+0x80>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	f000 f80e 	bl	8003fe8 <__malloc_unlock>
 8003fcc:	e797      	b.n	8003efe <_malloc_r+0x22>
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	e7dc      	b.n	8003f8c <_malloc_r+0xb0>
 8003fd2:	605b      	str	r3, [r3, #4]
 8003fd4:	deff      	udf	#255	; 0xff
 8003fd6:	bf00      	nop
 8003fd8:	200002d8 	.word	0x200002d8

08003fdc <__malloc_lock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__malloc_lock+0x8>)
 8003fde:	f7ff bf13 	b.w	8003e08 <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	200002d4 	.word	0x200002d4

08003fe8 <__malloc_unlock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__malloc_unlock+0x8>)
 8003fea:	f7ff bf0e 	b.w	8003e0a <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200002d4 	.word	0x200002d4

08003ff4 <__ssputs_r>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	461f      	mov	r7, r3
 8003ffa:	688e      	ldr	r6, [r1, #8]
 8003ffc:	4682      	mov	sl, r0
 8003ffe:	42be      	cmp	r6, r7
 8004000:	460c      	mov	r4, r1
 8004002:	4690      	mov	r8, r2
 8004004:	680b      	ldr	r3, [r1, #0]
 8004006:	d82c      	bhi.n	8004062 <__ssputs_r+0x6e>
 8004008:	898a      	ldrh	r2, [r1, #12]
 800400a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800400e:	d026      	beq.n	800405e <__ssputs_r+0x6a>
 8004010:	6965      	ldr	r5, [r4, #20]
 8004012:	6909      	ldr	r1, [r1, #16]
 8004014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004018:	eba3 0901 	sub.w	r9, r3, r1
 800401c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004020:	1c7b      	adds	r3, r7, #1
 8004022:	444b      	add	r3, r9
 8004024:	106d      	asrs	r5, r5, #1
 8004026:	429d      	cmp	r5, r3
 8004028:	bf38      	it	cc
 800402a:	461d      	movcc	r5, r3
 800402c:	0553      	lsls	r3, r2, #21
 800402e:	d527      	bpl.n	8004080 <__ssputs_r+0x8c>
 8004030:	4629      	mov	r1, r5
 8004032:	f7ff ff53 	bl	8003edc <_malloc_r>
 8004036:	4606      	mov	r6, r0
 8004038:	b360      	cbz	r0, 8004094 <__ssputs_r+0xa0>
 800403a:	464a      	mov	r2, r9
 800403c:	6921      	ldr	r1, [r4, #16]
 800403e:	f000 fafd 	bl	800463c <memcpy>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6126      	str	r6, [r4, #16]
 8004050:	444e      	add	r6, r9
 8004052:	6026      	str	r6, [r4, #0]
 8004054:	463e      	mov	r6, r7
 8004056:	6165      	str	r5, [r4, #20]
 8004058:	eba5 0509 	sub.w	r5, r5, r9
 800405c:	60a5      	str	r5, [r4, #8]
 800405e:	42be      	cmp	r6, r7
 8004060:	d900      	bls.n	8004064 <__ssputs_r+0x70>
 8004062:	463e      	mov	r6, r7
 8004064:	4632      	mov	r2, r6
 8004066:	4641      	mov	r1, r8
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	f000 faaf 	bl	80045cc <memmove>
 800406e:	2000      	movs	r0, #0
 8004070:	68a3      	ldr	r3, [r4, #8]
 8004072:	1b9b      	subs	r3, r3, r6
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	4433      	add	r3, r6
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	462a      	mov	r2, r5
 8004082:	f000 fae9 	bl	8004658 <_realloc_r>
 8004086:	4606      	mov	r6, r0
 8004088:	2800      	cmp	r0, #0
 800408a:	d1e0      	bne.n	800404e <__ssputs_r+0x5a>
 800408c:	4650      	mov	r0, sl
 800408e:	6921      	ldr	r1, [r4, #16]
 8004090:	f7ff febc 	bl	8003e0c <_free_r>
 8004094:	230c      	movs	r3, #12
 8004096:	f8ca 3000 	str.w	r3, [sl]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a4:	81a3      	strh	r3, [r4, #12]
 80040a6:	e7e9      	b.n	800407c <__ssputs_r+0x88>

080040a8 <_svfiprintf_r>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	4698      	mov	r8, r3
 80040ae:	898b      	ldrh	r3, [r1, #12]
 80040b0:	4607      	mov	r7, r0
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	460d      	mov	r5, r1
 80040b6:	4614      	mov	r4, r2
 80040b8:	b09d      	sub	sp, #116	; 0x74
 80040ba:	d50e      	bpl.n	80040da <_svfiprintf_r+0x32>
 80040bc:	690b      	ldr	r3, [r1, #16]
 80040be:	b963      	cbnz	r3, 80040da <_svfiprintf_r+0x32>
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	f7ff ff0b 	bl	8003edc <_malloc_r>
 80040c6:	6028      	str	r0, [r5, #0]
 80040c8:	6128      	str	r0, [r5, #16]
 80040ca:	b920      	cbnz	r0, 80040d6 <_svfiprintf_r+0x2e>
 80040cc:	230c      	movs	r3, #12
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	e0d0      	b.n	8004278 <_svfiprintf_r+0x1d0>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	616b      	str	r3, [r5, #20]
 80040da:	2300      	movs	r3, #0
 80040dc:	9309      	str	r3, [sp, #36]	; 0x24
 80040de:	2320      	movs	r3, #32
 80040e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e4:	2330      	movs	r3, #48	; 0x30
 80040e6:	f04f 0901 	mov.w	r9, #1
 80040ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004290 <_svfiprintf_r+0x1e8>
 80040f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040f6:	4623      	mov	r3, r4
 80040f8:	469a      	mov	sl, r3
 80040fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fe:	b10a      	cbz	r2, 8004104 <_svfiprintf_r+0x5c>
 8004100:	2a25      	cmp	r2, #37	; 0x25
 8004102:	d1f9      	bne.n	80040f8 <_svfiprintf_r+0x50>
 8004104:	ebba 0b04 	subs.w	fp, sl, r4
 8004108:	d00b      	beq.n	8004122 <_svfiprintf_r+0x7a>
 800410a:	465b      	mov	r3, fp
 800410c:	4622      	mov	r2, r4
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ff6f 	bl	8003ff4 <__ssputs_r>
 8004116:	3001      	adds	r0, #1
 8004118:	f000 80a9 	beq.w	800426e <_svfiprintf_r+0x1c6>
 800411c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800411e:	445a      	add	r2, fp
 8004120:	9209      	str	r2, [sp, #36]	; 0x24
 8004122:	f89a 3000 	ldrb.w	r3, [sl]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a1 	beq.w	800426e <_svfiprintf_r+0x1c6>
 800412c:	2300      	movs	r3, #0
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004136:	f10a 0a01 	add.w	sl, sl, #1
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	9307      	str	r3, [sp, #28]
 800413e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004142:	931a      	str	r3, [sp, #104]	; 0x68
 8004144:	4654      	mov	r4, sl
 8004146:	2205      	movs	r2, #5
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	4850      	ldr	r0, [pc, #320]	; (8004290 <_svfiprintf_r+0x1e8>)
 800414e:	f000 fa67 	bl	8004620 <memchr>
 8004152:	9a04      	ldr	r2, [sp, #16]
 8004154:	b9d8      	cbnz	r0, 800418e <_svfiprintf_r+0xe6>
 8004156:	06d0      	lsls	r0, r2, #27
 8004158:	bf44      	itt	mi
 800415a:	2320      	movmi	r3, #32
 800415c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004160:	0711      	lsls	r1, r2, #28
 8004162:	bf44      	itt	mi
 8004164:	232b      	movmi	r3, #43	; 0x2b
 8004166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416a:	f89a 3000 	ldrb.w	r3, [sl]
 800416e:	2b2a      	cmp	r3, #42	; 0x2a
 8004170:	d015      	beq.n	800419e <_svfiprintf_r+0xf6>
 8004172:	4654      	mov	r4, sl
 8004174:	2000      	movs	r0, #0
 8004176:	f04f 0c0a 	mov.w	ip, #10
 800417a:	9a07      	ldr	r2, [sp, #28]
 800417c:	4621      	mov	r1, r4
 800417e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004182:	3b30      	subs	r3, #48	; 0x30
 8004184:	2b09      	cmp	r3, #9
 8004186:	d94d      	bls.n	8004224 <_svfiprintf_r+0x17c>
 8004188:	b1b0      	cbz	r0, 80041b8 <_svfiprintf_r+0x110>
 800418a:	9207      	str	r2, [sp, #28]
 800418c:	e014      	b.n	80041b8 <_svfiprintf_r+0x110>
 800418e:	eba0 0308 	sub.w	r3, r0, r8
 8004192:	fa09 f303 	lsl.w	r3, r9, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	46a2      	mov	sl, r4
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	e7d2      	b.n	8004144 <_svfiprintf_r+0x9c>
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	9103      	str	r1, [sp, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfbb      	ittet	lt
 80041aa:	425b      	neglt	r3, r3
 80041ac:	f042 0202 	orrlt.w	r2, r2, #2
 80041b0:	9307      	strge	r3, [sp, #28]
 80041b2:	9307      	strlt	r3, [sp, #28]
 80041b4:	bfb8      	it	lt
 80041b6:	9204      	strlt	r2, [sp, #16]
 80041b8:	7823      	ldrb	r3, [r4, #0]
 80041ba:	2b2e      	cmp	r3, #46	; 0x2e
 80041bc:	d10c      	bne.n	80041d8 <_svfiprintf_r+0x130>
 80041be:	7863      	ldrb	r3, [r4, #1]
 80041c0:	2b2a      	cmp	r3, #42	; 0x2a
 80041c2:	d134      	bne.n	800422e <_svfiprintf_r+0x186>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	3402      	adds	r4, #2
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9203      	str	r2, [sp, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfb8      	it	lt
 80041d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004294 <_svfiprintf_r+0x1ec>
 80041dc:	2203      	movs	r2, #3
 80041de:	4650      	mov	r0, sl
 80041e0:	7821      	ldrb	r1, [r4, #0]
 80041e2:	f000 fa1d 	bl	8004620 <memchr>
 80041e6:	b138      	cbz	r0, 80041f8 <_svfiprintf_r+0x150>
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	9b04      	ldr	r3, [sp, #16]
 80041ec:	eba0 000a 	sub.w	r0, r0, sl
 80041f0:	4082      	lsls	r2, r0
 80041f2:	4313      	orrs	r3, r2
 80041f4:	3401      	adds	r4, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fc:	2206      	movs	r2, #6
 80041fe:	4826      	ldr	r0, [pc, #152]	; (8004298 <_svfiprintf_r+0x1f0>)
 8004200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004204:	f000 fa0c 	bl	8004620 <memchr>
 8004208:	2800      	cmp	r0, #0
 800420a:	d038      	beq.n	800427e <_svfiprintf_r+0x1d6>
 800420c:	4b23      	ldr	r3, [pc, #140]	; (800429c <_svfiprintf_r+0x1f4>)
 800420e:	bb1b      	cbnz	r3, 8004258 <_svfiprintf_r+0x1b0>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	3307      	adds	r3, #7
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	3308      	adds	r3, #8
 800421a:	9303      	str	r3, [sp, #12]
 800421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421e:	4433      	add	r3, r6
 8004220:	9309      	str	r3, [sp, #36]	; 0x24
 8004222:	e768      	b.n	80040f6 <_svfiprintf_r+0x4e>
 8004224:	460c      	mov	r4, r1
 8004226:	2001      	movs	r0, #1
 8004228:	fb0c 3202 	mla	r2, ip, r2, r3
 800422c:	e7a6      	b.n	800417c <_svfiprintf_r+0xd4>
 800422e:	2300      	movs	r3, #0
 8004230:	f04f 0c0a 	mov.w	ip, #10
 8004234:	4619      	mov	r1, r3
 8004236:	3401      	adds	r4, #1
 8004238:	9305      	str	r3, [sp, #20]
 800423a:	4620      	mov	r0, r4
 800423c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004240:	3a30      	subs	r2, #48	; 0x30
 8004242:	2a09      	cmp	r2, #9
 8004244:	d903      	bls.n	800424e <_svfiprintf_r+0x1a6>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0c6      	beq.n	80041d8 <_svfiprintf_r+0x130>
 800424a:	9105      	str	r1, [sp, #20]
 800424c:	e7c4      	b.n	80041d8 <_svfiprintf_r+0x130>
 800424e:	4604      	mov	r4, r0
 8004250:	2301      	movs	r3, #1
 8004252:	fb0c 2101 	mla	r1, ip, r1, r2
 8004256:	e7f0      	b.n	800423a <_svfiprintf_r+0x192>
 8004258:	ab03      	add	r3, sp, #12
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	462a      	mov	r2, r5
 800425e:	4638      	mov	r0, r7
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <_svfiprintf_r+0x1f8>)
 8004262:	a904      	add	r1, sp, #16
 8004264:	f3af 8000 	nop.w
 8004268:	1c42      	adds	r2, r0, #1
 800426a:	4606      	mov	r6, r0
 800426c:	d1d6      	bne.n	800421c <_svfiprintf_r+0x174>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	065b      	lsls	r3, r3, #25
 8004272:	f53f af2d 	bmi.w	80040d0 <_svfiprintf_r+0x28>
 8004276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004278:	b01d      	add	sp, #116	; 0x74
 800427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427e:	ab03      	add	r3, sp, #12
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	462a      	mov	r2, r5
 8004284:	4638      	mov	r0, r7
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <_svfiprintf_r+0x1f8>)
 8004288:	a904      	add	r1, sp, #16
 800428a:	f000 f87d 	bl	8004388 <_printf_i>
 800428e:	e7eb      	b.n	8004268 <_svfiprintf_r+0x1c0>
 8004290:	08005032 	.word	0x08005032
 8004294:	08005038 	.word	0x08005038
 8004298:	0800503c 	.word	0x0800503c
 800429c:	00000000 	.word	0x00000000
 80042a0:	08003ff5 	.word	0x08003ff5

080042a4 <_printf_common>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	4616      	mov	r6, r2
 80042aa:	4699      	mov	r9, r3
 80042ac:	688a      	ldr	r2, [r1, #8]
 80042ae:	690b      	ldr	r3, [r1, #16]
 80042b0:	4607      	mov	r7, r0
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bfb8      	it	lt
 80042b6:	4613      	movlt	r3, r2
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042be:	460c      	mov	r4, r1
 80042c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042c4:	b10a      	cbz	r2, 80042ca <_printf_common+0x26>
 80042c6:	3301      	adds	r3, #1
 80042c8:	6033      	str	r3, [r6, #0]
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	0699      	lsls	r1, r3, #26
 80042ce:	bf42      	ittt	mi
 80042d0:	6833      	ldrmi	r3, [r6, #0]
 80042d2:	3302      	addmi	r3, #2
 80042d4:	6033      	strmi	r3, [r6, #0]
 80042d6:	6825      	ldr	r5, [r4, #0]
 80042d8:	f015 0506 	ands.w	r5, r5, #6
 80042dc:	d106      	bne.n	80042ec <_printf_common+0x48>
 80042de:	f104 0a19 	add.w	sl, r4, #25
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	6832      	ldr	r2, [r6, #0]
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	dc2b      	bgt.n	8004344 <_printf_common+0xa0>
 80042ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042f0:	1e13      	subs	r3, r2, #0
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	2301      	movne	r3, #1
 80042f8:	0692      	lsls	r2, r2, #26
 80042fa:	d430      	bmi.n	800435e <_printf_common+0xba>
 80042fc:	4649      	mov	r1, r9
 80042fe:	4638      	mov	r0, r7
 8004300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004304:	47c0      	blx	r8
 8004306:	3001      	adds	r0, #1
 8004308:	d023      	beq.n	8004352 <_printf_common+0xae>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	6922      	ldr	r2, [r4, #16]
 800430e:	f003 0306 	and.w	r3, r3, #6
 8004312:	2b04      	cmp	r3, #4
 8004314:	bf14      	ite	ne
 8004316:	2500      	movne	r5, #0
 8004318:	6833      	ldreq	r3, [r6, #0]
 800431a:	f04f 0600 	mov.w	r6, #0
 800431e:	bf08      	it	eq
 8004320:	68e5      	ldreq	r5, [r4, #12]
 8004322:	f104 041a 	add.w	r4, r4, #26
 8004326:	bf08      	it	eq
 8004328:	1aed      	subeq	r5, r5, r3
 800432a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800432e:	bf08      	it	eq
 8004330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004334:	4293      	cmp	r3, r2
 8004336:	bfc4      	itt	gt
 8004338:	1a9b      	subgt	r3, r3, r2
 800433a:	18ed      	addgt	r5, r5, r3
 800433c:	42b5      	cmp	r5, r6
 800433e:	d11a      	bne.n	8004376 <_printf_common+0xd2>
 8004340:	2000      	movs	r0, #0
 8004342:	e008      	b.n	8004356 <_printf_common+0xb2>
 8004344:	2301      	movs	r3, #1
 8004346:	4652      	mov	r2, sl
 8004348:	4649      	mov	r1, r9
 800434a:	4638      	mov	r0, r7
 800434c:	47c0      	blx	r8
 800434e:	3001      	adds	r0, #1
 8004350:	d103      	bne.n	800435a <_printf_common+0xb6>
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435a:	3501      	adds	r5, #1
 800435c:	e7c1      	b.n	80042e2 <_printf_common+0x3e>
 800435e:	2030      	movs	r0, #48	; 0x30
 8004360:	18e1      	adds	r1, r4, r3
 8004362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800436c:	4422      	add	r2, r4
 800436e:	3302      	adds	r3, #2
 8004370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004374:	e7c2      	b.n	80042fc <_printf_common+0x58>
 8004376:	2301      	movs	r3, #1
 8004378:	4622      	mov	r2, r4
 800437a:	4649      	mov	r1, r9
 800437c:	4638      	mov	r0, r7
 800437e:	47c0      	blx	r8
 8004380:	3001      	adds	r0, #1
 8004382:	d0e6      	beq.n	8004352 <_printf_common+0xae>
 8004384:	3601      	adds	r6, #1
 8004386:	e7d9      	b.n	800433c <_printf_common+0x98>

08004388 <_printf_i>:
 8004388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	7e0f      	ldrb	r7, [r1, #24]
 800438e:	4691      	mov	r9, r2
 8004390:	2f78      	cmp	r7, #120	; 0x78
 8004392:	4680      	mov	r8, r0
 8004394:	460c      	mov	r4, r1
 8004396:	469a      	mov	sl, r3
 8004398:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800439a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800439e:	d807      	bhi.n	80043b0 <_printf_i+0x28>
 80043a0:	2f62      	cmp	r7, #98	; 0x62
 80043a2:	d80a      	bhi.n	80043ba <_printf_i+0x32>
 80043a4:	2f00      	cmp	r7, #0
 80043a6:	f000 80d5 	beq.w	8004554 <_printf_i+0x1cc>
 80043aa:	2f58      	cmp	r7, #88	; 0x58
 80043ac:	f000 80c1 	beq.w	8004532 <_printf_i+0x1aa>
 80043b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043b8:	e03a      	b.n	8004430 <_printf_i+0xa8>
 80043ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043be:	2b15      	cmp	r3, #21
 80043c0:	d8f6      	bhi.n	80043b0 <_printf_i+0x28>
 80043c2:	a101      	add	r1, pc, #4	; (adr r1, 80043c8 <_printf_i+0x40>)
 80043c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c8:	08004421 	.word	0x08004421
 80043cc:	08004435 	.word	0x08004435
 80043d0:	080043b1 	.word	0x080043b1
 80043d4:	080043b1 	.word	0x080043b1
 80043d8:	080043b1 	.word	0x080043b1
 80043dc:	080043b1 	.word	0x080043b1
 80043e0:	08004435 	.word	0x08004435
 80043e4:	080043b1 	.word	0x080043b1
 80043e8:	080043b1 	.word	0x080043b1
 80043ec:	080043b1 	.word	0x080043b1
 80043f0:	080043b1 	.word	0x080043b1
 80043f4:	0800453b 	.word	0x0800453b
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080044f5 	.word	0x080044f5
 8004400:	080043b1 	.word	0x080043b1
 8004404:	080043b1 	.word	0x080043b1
 8004408:	0800455d 	.word	0x0800455d
 800440c:	080043b1 	.word	0x080043b1
 8004410:	08004461 	.word	0x08004461
 8004414:	080043b1 	.word	0x080043b1
 8004418:	080043b1 	.word	0x080043b1
 800441c:	080044fd 	.word	0x080044fd
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	602a      	str	r2, [r5, #0]
 8004428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800442c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004430:	2301      	movs	r3, #1
 8004432:	e0a0      	b.n	8004576 <_printf_i+0x1ee>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	0607      	lsls	r7, r0, #24
 800443a:	f103 0104 	add.w	r1, r3, #4
 800443e:	6029      	str	r1, [r5, #0]
 8004440:	d501      	bpl.n	8004446 <_printf_i+0xbe>
 8004442:	681e      	ldr	r6, [r3, #0]
 8004444:	e003      	b.n	800444e <_printf_i+0xc6>
 8004446:	0646      	lsls	r6, r0, #25
 8004448:	d5fb      	bpl.n	8004442 <_printf_i+0xba>
 800444a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800444e:	2e00      	cmp	r6, #0
 8004450:	da03      	bge.n	800445a <_printf_i+0xd2>
 8004452:	232d      	movs	r3, #45	; 0x2d
 8004454:	4276      	negs	r6, r6
 8004456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800445a:	230a      	movs	r3, #10
 800445c:	4859      	ldr	r0, [pc, #356]	; (80045c4 <_printf_i+0x23c>)
 800445e:	e012      	b.n	8004486 <_printf_i+0xfe>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	6029      	str	r1, [r5, #0]
 8004468:	0605      	lsls	r5, r0, #24
 800446a:	d501      	bpl.n	8004470 <_printf_i+0xe8>
 800446c:	681e      	ldr	r6, [r3, #0]
 800446e:	e002      	b.n	8004476 <_printf_i+0xee>
 8004470:	0641      	lsls	r1, r0, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0xe4>
 8004474:	881e      	ldrh	r6, [r3, #0]
 8004476:	2f6f      	cmp	r7, #111	; 0x6f
 8004478:	bf0c      	ite	eq
 800447a:	2308      	moveq	r3, #8
 800447c:	230a      	movne	r3, #10
 800447e:	4851      	ldr	r0, [pc, #324]	; (80045c4 <_printf_i+0x23c>)
 8004480:	2100      	movs	r1, #0
 8004482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004486:	6865      	ldr	r5, [r4, #4]
 8004488:	2d00      	cmp	r5, #0
 800448a:	bfa8      	it	ge
 800448c:	6821      	ldrge	r1, [r4, #0]
 800448e:	60a5      	str	r5, [r4, #8]
 8004490:	bfa4      	itt	ge
 8004492:	f021 0104 	bicge.w	r1, r1, #4
 8004496:	6021      	strge	r1, [r4, #0]
 8004498:	b90e      	cbnz	r6, 800449e <_printf_i+0x116>
 800449a:	2d00      	cmp	r5, #0
 800449c:	d04b      	beq.n	8004536 <_printf_i+0x1ae>
 800449e:	4615      	mov	r5, r2
 80044a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80044a4:	fb03 6711 	mls	r7, r3, r1, r6
 80044a8:	5dc7      	ldrb	r7, [r0, r7]
 80044aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ae:	4637      	mov	r7, r6
 80044b0:	42bb      	cmp	r3, r7
 80044b2:	460e      	mov	r6, r1
 80044b4:	d9f4      	bls.n	80044a0 <_printf_i+0x118>
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d10b      	bne.n	80044d2 <_printf_i+0x14a>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	07de      	lsls	r6, r3, #31
 80044be:	d508      	bpl.n	80044d2 <_printf_i+0x14a>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	6861      	ldr	r1, [r4, #4]
 80044c4:	4299      	cmp	r1, r3
 80044c6:	bfde      	ittt	le
 80044c8:	2330      	movle	r3, #48	; 0x30
 80044ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044d2:	1b52      	subs	r2, r2, r5
 80044d4:	6122      	str	r2, [r4, #16]
 80044d6:	464b      	mov	r3, r9
 80044d8:	4621      	mov	r1, r4
 80044da:	4640      	mov	r0, r8
 80044dc:	f8cd a000 	str.w	sl, [sp]
 80044e0:	aa03      	add	r2, sp, #12
 80044e2:	f7ff fedf 	bl	80042a4 <_printf_common>
 80044e6:	3001      	adds	r0, #1
 80044e8:	d14a      	bne.n	8004580 <_printf_i+0x1f8>
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295
 80044ee:	b004      	add	sp, #16
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	2778      	movs	r7, #120	; 0x78
 80044fe:	4832      	ldr	r0, [pc, #200]	; (80045c8 <_printf_i+0x240>)
 8004500:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	6829      	ldr	r1, [r5, #0]
 8004508:	061f      	lsls	r7, r3, #24
 800450a:	f851 6b04 	ldr.w	r6, [r1], #4
 800450e:	d402      	bmi.n	8004516 <_printf_i+0x18e>
 8004510:	065f      	lsls	r7, r3, #25
 8004512:	bf48      	it	mi
 8004514:	b2b6      	uxthmi	r6, r6
 8004516:	07df      	lsls	r7, r3, #31
 8004518:	bf48      	it	mi
 800451a:	f043 0320 	orrmi.w	r3, r3, #32
 800451e:	6029      	str	r1, [r5, #0]
 8004520:	bf48      	it	mi
 8004522:	6023      	strmi	r3, [r4, #0]
 8004524:	b91e      	cbnz	r6, 800452e <_printf_i+0x1a6>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f023 0320 	bic.w	r3, r3, #32
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	2310      	movs	r3, #16
 8004530:	e7a6      	b.n	8004480 <_printf_i+0xf8>
 8004532:	4824      	ldr	r0, [pc, #144]	; (80045c4 <_printf_i+0x23c>)
 8004534:	e7e4      	b.n	8004500 <_printf_i+0x178>
 8004536:	4615      	mov	r5, r2
 8004538:	e7bd      	b.n	80044b6 <_printf_i+0x12e>
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	6826      	ldr	r6, [r4, #0]
 800453e:	1d18      	adds	r0, r3, #4
 8004540:	6961      	ldr	r1, [r4, #20]
 8004542:	6028      	str	r0, [r5, #0]
 8004544:	0635      	lsls	r5, r6, #24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	d501      	bpl.n	800454e <_printf_i+0x1c6>
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	e002      	b.n	8004554 <_printf_i+0x1cc>
 800454e:	0670      	lsls	r0, r6, #25
 8004550:	d5fb      	bpl.n	800454a <_printf_i+0x1c2>
 8004552:	8019      	strh	r1, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	4615      	mov	r5, r2
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	e7bc      	b.n	80044d6 <_printf_i+0x14e>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	2100      	movs	r1, #0
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f859 	bl	8004620 <memchr>
 800456e:	b108      	cbz	r0, 8004574 <_printf_i+0x1ec>
 8004570:	1b40      	subs	r0, r0, r5
 8004572:	6060      	str	r0, [r4, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457e:	e7aa      	b.n	80044d6 <_printf_i+0x14e>
 8004580:	462a      	mov	r2, r5
 8004582:	4649      	mov	r1, r9
 8004584:	4640      	mov	r0, r8
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	47d0      	blx	sl
 800458a:	3001      	adds	r0, #1
 800458c:	d0ad      	beq.n	80044ea <_printf_i+0x162>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	079b      	lsls	r3, r3, #30
 8004592:	d413      	bmi.n	80045bc <_printf_i+0x234>
 8004594:	68e0      	ldr	r0, [r4, #12]
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	4298      	cmp	r0, r3
 800459a:	bfb8      	it	lt
 800459c:	4618      	movlt	r0, r3
 800459e:	e7a6      	b.n	80044ee <_printf_i+0x166>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4632      	mov	r2, r6
 80045a4:	4649      	mov	r1, r9
 80045a6:	4640      	mov	r0, r8
 80045a8:	47d0      	blx	sl
 80045aa:	3001      	adds	r0, #1
 80045ac:	d09d      	beq.n	80044ea <_printf_i+0x162>
 80045ae:	3501      	adds	r5, #1
 80045b0:	68e3      	ldr	r3, [r4, #12]
 80045b2:	9903      	ldr	r1, [sp, #12]
 80045b4:	1a5b      	subs	r3, r3, r1
 80045b6:	42ab      	cmp	r3, r5
 80045b8:	dcf2      	bgt.n	80045a0 <_printf_i+0x218>
 80045ba:	e7eb      	b.n	8004594 <_printf_i+0x20c>
 80045bc:	2500      	movs	r5, #0
 80045be:	f104 0619 	add.w	r6, r4, #25
 80045c2:	e7f5      	b.n	80045b0 <_printf_i+0x228>
 80045c4:	08005043 	.word	0x08005043
 80045c8:	08005054 	.word	0x08005054

080045cc <memmove>:
 80045cc:	4288      	cmp	r0, r1
 80045ce:	b510      	push	{r4, lr}
 80045d0:	eb01 0402 	add.w	r4, r1, r2
 80045d4:	d902      	bls.n	80045dc <memmove+0x10>
 80045d6:	4284      	cmp	r4, r0
 80045d8:	4623      	mov	r3, r4
 80045da:	d807      	bhi.n	80045ec <memmove+0x20>
 80045dc:	1e43      	subs	r3, r0, #1
 80045de:	42a1      	cmp	r1, r4
 80045e0:	d008      	beq.n	80045f4 <memmove+0x28>
 80045e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ea:	e7f8      	b.n	80045de <memmove+0x12>
 80045ec:	4601      	mov	r1, r0
 80045ee:	4402      	add	r2, r0
 80045f0:	428a      	cmp	r2, r1
 80045f2:	d100      	bne.n	80045f6 <memmove+0x2a>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045fe:	e7f7      	b.n	80045f0 <memmove+0x24>

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	2300      	movs	r3, #0
 8004604:	4d05      	ldr	r5, [pc, #20]	; (800461c <_sbrk_r+0x1c>)
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fd f99c 	bl	8001948 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	200002d0 	.word	0x200002d0

08004620 <memchr>:
 8004620:	4603      	mov	r3, r0
 8004622:	b510      	push	{r4, lr}
 8004624:	b2c9      	uxtb	r1, r1
 8004626:	4402      	add	r2, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	4618      	mov	r0, r3
 800462c:	d101      	bne.n	8004632 <memchr+0x12>
 800462e:	2000      	movs	r0, #0
 8004630:	e003      	b.n	800463a <memchr+0x1a>
 8004632:	7804      	ldrb	r4, [r0, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	428c      	cmp	r4, r1
 8004638:	d1f6      	bne.n	8004628 <memchr+0x8>
 800463a:	bd10      	pop	{r4, pc}

0800463c <memcpy>:
 800463c:	440a      	add	r2, r1
 800463e:	4291      	cmp	r1, r2
 8004640:	f100 33ff 	add.w	r3, r0, #4294967295
 8004644:	d100      	bne.n	8004648 <memcpy+0xc>
 8004646:	4770      	bx	lr
 8004648:	b510      	push	{r4, lr}
 800464a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800464e:	4291      	cmp	r1, r2
 8004650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004654:	d1f9      	bne.n	800464a <memcpy+0xe>
 8004656:	bd10      	pop	{r4, pc}

08004658 <_realloc_r>:
 8004658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465c:	4680      	mov	r8, r0
 800465e:	4614      	mov	r4, r2
 8004660:	460e      	mov	r6, r1
 8004662:	b921      	cbnz	r1, 800466e <_realloc_r+0x16>
 8004664:	4611      	mov	r1, r2
 8004666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466a:	f7ff bc37 	b.w	8003edc <_malloc_r>
 800466e:	b92a      	cbnz	r2, 800467c <_realloc_r+0x24>
 8004670:	f7ff fbcc 	bl	8003e0c <_free_r>
 8004674:	4625      	mov	r5, r4
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467c:	f000 f81b 	bl	80046b6 <_malloc_usable_size_r>
 8004680:	4284      	cmp	r4, r0
 8004682:	4607      	mov	r7, r0
 8004684:	d802      	bhi.n	800468c <_realloc_r+0x34>
 8004686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800468a:	d812      	bhi.n	80046b2 <_realloc_r+0x5a>
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f7ff fc24 	bl	8003edc <_malloc_r>
 8004694:	4605      	mov	r5, r0
 8004696:	2800      	cmp	r0, #0
 8004698:	d0ed      	beq.n	8004676 <_realloc_r+0x1e>
 800469a:	42bc      	cmp	r4, r7
 800469c:	4622      	mov	r2, r4
 800469e:	4631      	mov	r1, r6
 80046a0:	bf28      	it	cs
 80046a2:	463a      	movcs	r2, r7
 80046a4:	f7ff ffca 	bl	800463c <memcpy>
 80046a8:	4631      	mov	r1, r6
 80046aa:	4640      	mov	r0, r8
 80046ac:	f7ff fbae 	bl	8003e0c <_free_r>
 80046b0:	e7e1      	b.n	8004676 <_realloc_r+0x1e>
 80046b2:	4635      	mov	r5, r6
 80046b4:	e7df      	b.n	8004676 <_realloc_r+0x1e>

080046b6 <_malloc_usable_size_r>:
 80046b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ba:	1f18      	subs	r0, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfbc      	itt	lt
 80046c0:	580b      	ldrlt	r3, [r1, r0]
 80046c2:	18c0      	addlt	r0, r0, r3
 80046c4:	4770      	bx	lr
	...

080046c8 <_init>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

080046d4 <_fini>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr
